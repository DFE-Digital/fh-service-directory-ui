{"version":3,"sources":["tmp/js/components/analytics.js","tmp/js/components/cookie-functions.js","tmp/js/components/helpers.js","tmp/js/components/cookie-banner.js","tmp/js/components/cookies-page.js","tmp/js/bundle.js"],"names":["loadAnalytics","window","dataLayer","w","d","s","l","i","push","Date","getTime","event","f","getElementsByTagName","j","createElement","async","src","parentNode","insertBefore","document","CONSENT_COOKIE_NAME","TRACKING_LIVE_ID","COOKIE_CATEGORIES","analytics","essential","DEFAULT_COOKIE_CONSENT","Cookie","name","value","options","getCookie","deleteCookie","days","setCookie","getConsentCookie","consentCookieObj","consentCookie","JSON","parse","err","isValidConsentCookie","version","GDS_CONSENT_COOKIE_VERSION","setConsentCookie","cookieConsent","option","stringify","resetCookies","cookieType","Analytics","forEach","cookie","userAllowsCookieCategory","cookieCategory","cookiePreferences","e","console","error","userAllowsCookie","cookieName","category","indexOf","nameEQ","cookies","split","len","length","charAt","substring","decodeURIComponent","cookieString","date","setTime","toUTCString","location","protocol","hostname","nodeListForEach","nodes","callback","NodeList","prototype","call","cookieBannerAcceptSelector","cookieBannerRejectSelector","cookieBannerHideButtonSelector","cookieMessageSelector","cookieConfirmationAcceptSelector","cookieConfirmationRejectSelector","CookieBanner","$module","this","CookiesPage","init","$cookieBanner","$acceptButton","querySelector","$rejectButton","$cookieMessage","$cookieConfirmationAccept","$cookieConfirmationReject","$cookieBannerHideButtons","querySelectorAll","onCookiesPage","currentConsentCookie","CookieFunctions.getConsentCookie","CookieFunctions.isValidConsentCookie","CookieFunctions.resetCookies","removeAttribute","addEventListener","acceptCookies","bind","rejectCookies","$cookieBannerHideButton","hideBanner","setAttribute","CookieFunctions.setConsentCookie","revealConfirmationMessage","confirmationMessage","getAttribute","focus","pathname","$cookiePage","$cookieForm","$cookieFormFieldsets","$successNotification","$successLink","$cookieFormFieldset","showUserPreference","savePreferences","preventDefault","preferences","getCookieType","selectedItem","showSuccessNotification","preference","undefined","radioValue","checked","referrer","URL","href","scrollTo","id","userConsent","$cookiesPage","backLinks","link","history","back","button","getElementById","filterButton","style","display","global","factory","exports","module","define","amd","GOVUKFrontend","mergeConfigs","flattenObject","configObject","flattenedObject","flattenLoop","obj","prefix","key","Object","hasOwnProperty","prefixedKey","formattedConfigObject","arguments","extractConfigByNamespace","namespace","Error","newObject","keyParts","shift","join","I18n","translations","config","locale","documentElement","lang","normaliseString","trimmedValue","trim","isFinite","Number","normaliseDataset","dataset","out","t","lookupKey","count","getPluralSuffix","translationString","match","replacePlaceholders","formatter","hasIntlNumberFormatSupport","Intl","NumberFormat","replace","placeholderWithBraces","placeholderKey","placeholderValue","format","hasIntlPluralRulesSupport","Boolean","PluralRules","supportedLocalesOf","preferredForm","select","selectPluralFormUsingFallbackRules","warn","Math","abs","floor","ruleset","getPluralRulesForLocale","pluralRules","localeShort","pluralRule","pluralRulesMap","languages","arabic","chinese","french","german","irish","russian","scottish","spanish","welsh","n","lastTwo","last","nativeDefineProperty","supportsAccessors","ERR_ACCESSORS_NOT_SUPPORTED","ERR_VALUE_ACCESSORS","defineProperty","object","property","descriptor","Element","TypeError","propertyString","String","hasValueOrWritable","getterType","get","setterType","set","__defineGetter__","__defineSetter__","self","Function","that","isCallable","$Array","Array","$Object","ObjectPrototype","ArrayPrototype","Empty","to_string","toString","hasToStringTag","Symbol","toStringTag","fnToStr","tryFunctionObject","fnClass","genClass","strClass","array_slice","slice","array_concat","concat","array_push","max","target","bound","args","binder","result","apply","boundLength","boundArgs","x","classList","toggle","className","DOMTokenList","createElementNS","dpSupport","defineGetter","fn","configurable","el","prop","tokens","tokenMap","maxLength","addIndexGetter","preop","reindex","rSpace","test","SyntaxError","code","baseVal","toLocaleString","item","idx","contains","token","add","remove","ignore","force","constructor","native","WorkerGlobalScope","importScripts","HTMLDocument","Document","HTMLElement","interval","vbody","appendChild","frameDocument","contentWindow","cache","shiv","element","deep","childNode","childNodes","index","nodeType","elements","nativeCreateElement","loopLimit","attachEvent","propertyName","nonValue","newValue","oldValue","hasAttribute","bodyCheck","onreadystatechange","setInterval","nodeName","toLowerCase","removeChild","clearTimeout","body","readyState","addProp","o","attr","tokenList","THIS","gibberishProperty","visage","mirror","reflections","_R","HTMLLinkElement","HTMLAnchorElement","HTMLAreaElement","aB","attributes","map","attribute","propName","substr","toUpperCase","enumerable","ACCORDION_TRANSLATIONS","hideAllSections","hideSection","hideSectionAriaLabel","showAllSections","showSection","showSectionAriaLabel","Accordion","$sections","browserSupportsSessionStorage","helper","checkForSessionStorage","defaultConfig","i18n","controlsClass","showAllClass","showAllTextClass","sectionExpandedClass","sectionButtonClass","sectionHeaderClass","sectionHeadingClass","sectionHeadingTextClass","sectionHeadingTextFocusClass","sectionShowHideToggleClass","sectionShowHideToggleFocusClass","sectionShowHideTextClass","upChevronIconClass","downChevronIconClass","sectionSummaryClass","sectionSummaryFocusClass","initControls","initSectionHeaders","areAllSectionsOpen","checkIfAllSectionsOpen","updateShowAllButton","$showAllButton","$icon","$accordionControls","firstChild","$wrappershowAllText","onShowOrHideAllToggle","$section","$header","constructHeaderMarkup","setExpanded","isExpanded","onSectionToggle","setInitialState","$headerWrapper","$span","$heading","$summary","$button","nodeValue","$headingText","$headingTextFocus","innerHTML","$showToggle","$showToggleFocus","$showToggleText","getButtonPunctuationEl","$summarySpan","$summarySpanFocus","replaceChild","expanded","storeState","nowExpanded","$showHideText","newButtonText","innerText","ariaLabelParts","ariaLabelMessage","$showAllIcon","$showAllText","testString","sessionStorage","setItem","getItem","removeItem","exception","contentId","contentState","$punctuationEl","Window","Event","unlistenableWindowEvents","click","dblclick","keyup","keypress","keydown","mousedown","mouseup","mousemove","mouseover","mouseenter","mouseleave","mouseout","storage","storagecommit","textinput","existingProto","type","eventInitDict","createEvent","bubbles","cancelable","initEvent","createEventObject","writable","listener","_events","eventElement","list","events","returnValue","stopPropagation","cancelBubble","stopImmediatePropagation","cancelImmediate","currentTarget","relatedTarget","fromElement","srcElement","timeStamp","clientX","pageX","scrollLeft","pageY","clientY","scrollTop","removeEventListener","splice","detachEvent","dispatchEvent","cancelBubbleEvent","fireEvent","parentWindow","array","Button","debounceFormSubmitTimer","preventDoubleClick","handleKeyDown","debounce","keyCode","setTimeout","DEBOUNCE_TIMEOUT_IN_SECONDS","Details","closestAttributeValue","$element","attributeName","closestElementWithAttribute","closest","open","polyfillDetails","$content","performance","now","c","r","random","tabIndex","polyfillHandleInputs","polyfillSetAttributes","node","matches","webkitMatchesSelector","oMatchesSelector","msMatchesSelector","mozMatchesSelector","selector","ownerDocument","SVGElement","parentElement","CHARACTER_COUNT_TRANSLATIONS","charactersUnderLimit","one","other","charactersAtLimit","charactersOverLimit","wordsUnderLimit","wordsAtLimit","wordsOverLimit","textareaDescription","CharacterCount","threshold","datasetConfig","configOverrides","maxlength","maxwords","$textarea","$visibleCountMessage","$screenReaderCountMessage","lastInputTimestamp","Checkboxes","$inputs","ErrorSummary","disableAutoFocus","NotificationBanner","Header","$menuButton","$menu","menuIsOpen","mql","Radios","SkipLink","$linkedElement","linkedElementListener","Tabs","$tabs","keys","left","right","up","down","jsHiddenClass","$textareaDescription","insertAdjacentElement","bindChangeEvents","updateCountMessage","handleKeyUp","handleFocus","handleBlur","updateVisibleCountMessage","valueChecker","updateIfValueChanged","clearInterval","updateScreenReaderCountMessage","remainingNumber","isOverThreshold","getCountMessage","text","countType","formatCountMessage","translationKeySuffix","currentLength","$input","syncAllConditionalReveals","handleClick","syncConditionalRevealWithInputState","$target","inputIsChecked","unCheckAllInputsExcept","$inputWithSameName","form","unCheckExclusiveInputs","$exclusiveInput","setFocus","focusTarget","tagName","inputId","getFragmentFromUrl","$legendOrLabel","getAssociatedLegendOrLabel","scrollIntoView","preventScroll","url","pop","$fieldset","legends","$candidateLegend","legendTop","getBoundingClientRect","top","inputRect","height","innerHeight","matchMedia","syncState","addListener","handleMenuButtonClick","$clickedInput","hasSameFormOwner","getLinkedElement","focusLinkedElement","linkedElementId","removeFocusProperties","hash","nextSibling","previousSibling","setupResponsiveChecks","setup","checkMode","teardown","$tabList","$tabListItems","$item","$tab","setAttributes","boundTabClick","onTabClick","boundTabKeydown","onTabKeydown","hideTab","$activeTab","getTab","showTab","boundOnHashChange","onHashChange","unsetAttributes","$tabWithHash","changingHash","$previousTab","getCurrentTab","unhighlightTab","hidePanel","highlightTab","showPanel","panelId","getHref","$panel","getPanel","$newTab","$currentTab","createHistoryEntry","activatePreviousTab","activateNextTab","currentTab","nextTabListItem","nextElementSibling","nextTab","previousTabListItem","previousElementSibling","previousTab","tab","initAll","$scope","scope","$accordion","accordion","$characterCount","characterCount","$checkbox","$detail","$errorSummary","errorSummary","$notificationBanner","notificationBanner","$radio"],"mappings":"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","file":"bundle.js","sourcesContent":["// it doesn't make sense to do typescript type checking in a javascript file where you can't specify the type (is there a way?)\n// (f is a HTMLScriptElement but we can't cast it in js)\n// so switch off javascript compilation for this file...\n// @ts-nocheck\nexport default function loadAnalytics() {\n    // ga side: https://www.youtube.com/watch?v=28d60ejfk3s\n    // should we set up consent?: https://developers.google.com/tag-platform/devguides/consent#tag-manager\n    if (!window.dataLayer) {\n        (function (w, d, s, l, i) {\n            w[l] = w[l] || [];\n            w[l].push({\n                'gtm.start': new Date().getTime(), event: 'gtm.js'\n            });\n            var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';\n            j.async = true;\n            j.src =\n                'https://www.googletagmanager.com/gtm.js?id=' + i + dl;\n            f.parentNode.insertBefore(j, f);\n        })(window, document, 'script', 'dataLayer', 'GTM-W6QMSGQ');\n        // nonce enabled version (if we decide to enable nonces)\n        //\n        // see: https://dev.to/matijamrkaic/using-google-tag-manager-with-a-content-security-policy-9ai\n        // <script id=\"gtmScript\" data-nonce=\"@Context.GetNonce()\" asp-add-nonce>\n        //\n        //    (function (w, d, s, l, i) {\n        //        w[l] = w[l] || [];\n        //        w[l].push({ 'gtm.start': new Date().getTime(), event: 'gtm.js' });\n        //        var f = d.getElementsByTagName(s)[0], j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : ''; j.async = true;\n        //        j.src = 'https://www.googletagmanager.com/gtm.js?id=' + i + dl; var n = d.querySelector('[nonce]'); n && j.setAttribute('nonce', n.nonce || n.getAttribute('nonce'));\n        //        f.parentNode.insertBefore(j, f);\n        //    }\n        //    )(window, document, 'script', 'dataLayer', 'GTM-W6QMSGQ');\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvYW5hbHl0aWNzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLCtIQUErSDtBQUMvSCx3REFBd0Q7QUFDeEQsd0RBQXdEO0FBQ3hELGNBQWM7QUFFZCxNQUFNLENBQUMsT0FBTyxVQUFVLGFBQWE7SUFFakMsdURBQXVEO0lBQ3ZELHNHQUFzRztJQUV0RyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtRQUVuQixDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUM7WUFDcEIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7WUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO2dCQUN6QixXQUFXLEVBQ1AsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFBRSxLQUFLLEVBQUUsUUFBUTthQUM1QyxDQUFDLENBQUM7WUFBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BDLENBQUMsR0FBRyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7WUFBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztZQUFDLENBQUMsQ0FBQyxHQUFHO2dCQUNyRiw2Q0FBNkMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQ2hHLENBQUMsQ0FBQyxDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxhQUFhLENBQUMsQ0FBQztRQUUvRCx3REFBd0Q7UUFDeEQsRUFBRTtRQUNGLCtGQUErRjtRQUMvRix5RUFBeUU7UUFDekUsRUFBRTtRQUNGLGlDQUFpQztRQUNqQyw0QkFBNEI7UUFDNUIsNEVBQTRFO1FBQzVFLCtIQUErSDtRQUMvSCwrS0FBK0s7UUFDL0ssMENBQTBDO1FBQzFDLE9BQU87UUFDUCxnRUFBZ0U7S0FDL0Q7QUFDTCxDQUFDIiwiZmlsZSI6ImNvbXBvbmVudHMvYW5hbHl0aWNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8vIGl0IGRvZXNuJ3QgbWFrZSBzZW5zZSB0byBkbyB0eXBlc2NyaXB0IHR5cGUgY2hlY2tpbmcgaW4gYSBqYXZhc2NyaXB0IGZpbGUgd2hlcmUgeW91IGNhbid0IHNwZWNpZnkgdGhlIHR5cGUgKGlzIHRoZXJlIGEgd2F5PylcclxuLy8gKGYgaXMgYSBIVE1MU2NyaXB0RWxlbWVudCBidXQgd2UgY2FuJ3QgY2FzdCBpdCBpbiBqcylcclxuLy8gc28gc3dpdGNoIG9mZiBqYXZhc2NyaXB0IGNvbXBpbGF0aW9uIGZvciB0aGlzIGZpbGUuLi5cclxuLy8gQHRzLW5vY2hlY2tcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvYWRBbmFseXRpY3MoKSB7XHJcblxyXG4gICAgLy8gZ2Egc2lkZTogaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj0yOGQ2MGVqZmszc1xyXG4gICAgLy8gc2hvdWxkIHdlIHNldCB1cCBjb25zZW50PzogaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vdGFnLXBsYXRmb3JtL2Rldmd1aWRlcy9jb25zZW50I3RhZy1tYW5hZ2VyXHJcblxyXG4gICAgaWYgKCF3aW5kb3cuZGF0YUxheWVyKSB7XHJcblxyXG4gICAgICAgIChmdW5jdGlvbiAodywgZCwgcywgbCwgaSkge1xyXG4gICAgICAgICAgICB3W2xdID0gd1tsXSB8fCBbXTsgd1tsXS5wdXNoKHtcclxuICAgICAgICAgICAgICAgICdndG0uc3RhcnQnOlxyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBEYXRlKCkuZ2V0VGltZSgpLCBldmVudDogJ2d0bS5qcydcclxuICAgICAgICAgICAgfSk7IHZhciBmID0gZC5nZXRFbGVtZW50c0J5VGFnTmFtZShzKVswXSxcclxuICAgICAgICAgICAgICAgIGogPSBkLmNyZWF0ZUVsZW1lbnQocyksIGRsID0gbCAhPSAnZGF0YUxheWVyJyA/ICcmbD0nICsgbCA6ICcnOyBqLmFzeW5jID0gdHJ1ZTsgai5zcmMgPVxyXG4gICAgICAgICAgICAgICAgJ2h0dHBzOi8vd3d3Lmdvb2dsZXRhZ21hbmFnZXIuY29tL2d0bS5qcz9pZD0nICsgaSArIGRsOyBmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosIGYpO1xyXG4gICAgICAgIH0pKHdpbmRvdywgZG9jdW1lbnQsICdzY3JpcHQnLCAnZGF0YUxheWVyJywgJ0dUTS1XNlFNU0dRJyk7XHJcblxyXG4gICAgLy8gbm9uY2UgZW5hYmxlZCB2ZXJzaW9uIChpZiB3ZSBkZWNpZGUgdG8gZW5hYmxlIG5vbmNlcylcclxuICAgIC8vXHJcbiAgICAvLyBzZWU6IGh0dHBzOi8vZGV2LnRvL21hdGlqYW1ya2FpYy91c2luZy1nb29nbGUtdGFnLW1hbmFnZXItd2l0aC1hLWNvbnRlbnQtc2VjdXJpdHktcG9saWN5LTlhaVxyXG4gICAgLy8gPHNjcmlwdCBpZD1cImd0bVNjcmlwdFwiIGRhdGEtbm9uY2U9XCJAQ29udGV4dC5HZXROb25jZSgpXCIgYXNwLWFkZC1ub25jZT5cclxuICAgIC8vXHJcbiAgICAvLyAgICAoZnVuY3Rpb24gKHcsIGQsIHMsIGwsIGkpIHtcclxuICAgIC8vICAgICAgICB3W2xdID0gd1tsXSB8fCBbXTtcclxuICAgIC8vICAgICAgICB3W2xdLnB1c2goeyAnZ3RtLnN0YXJ0JzogbmV3IERhdGUoKS5nZXRUaW1lKCksIGV2ZW50OiAnZ3RtLmpzJyB9KTtcclxuICAgIC8vICAgICAgICB2YXIgZiA9IGQuZ2V0RWxlbWVudHNCeVRhZ05hbWUocylbMF0sIGogPSBkLmNyZWF0ZUVsZW1lbnQocyksIGRsID0gbCAhPSAnZGF0YUxheWVyJyA/ICcmbD0nICsgbCA6ICcnOyBqLmFzeW5jID0gdHJ1ZTtcclxuICAgIC8vICAgICAgICBqLnNyYyA9ICdodHRwczovL3d3dy5nb29nbGV0YWdtYW5hZ2VyLmNvbS9ndG0uanM/aWQ9JyArIGkgKyBkbDsgdmFyIG4gPSBkLnF1ZXJ5U2VsZWN0b3IoJ1tub25jZV0nKTsgbiAmJiBqLnNldEF0dHJpYnV0ZSgnbm9uY2UnLCBuLm5vbmNlIHx8IG4uZ2V0QXR0cmlidXRlKCdub25jZScpKTtcclxuICAgIC8vICAgICAgICBmLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGosIGYpO1xyXG4gICAgLy8gICAgfVxyXG4gICAgLy8gICAgKSh3aW5kb3csIGRvY3VtZW50LCAnc2NyaXB0JywgJ2RhdGFMYXllcicsICdHVE0tVzZRTVNHUScpO1xyXG4gICAgfVxyXG59Il19\n","/**\n * Cookie functions\n * ================\n *\n * Used by the cookie banner component and cookies page pattern.\n *\n * Includes function `Cookie()` for getting, setting, and deleting cookies, and\n * functions to manage the users' consent to cookies.\n *\n * Note: there is an inline script in cookie-banner.njk to show the banner\n * as soon as possible, to avoid a high Cumulative Layout Shift (CLS) score.\n * The consent cookie version is defined in cookie-banner.njk\n */\nimport Analytics from './analytics.js';\n/* Name of the cookie to save users cookie preferences to. */\nvar CONSENT_COOKIE_NAME = 'service_directory_cookies_policy';\n/* Google Analytics tracking IDs for preview and live environments. */\n/*measurement ids or tag ids*/\n/*Fatayi is going to link the existing ga (this id) into gtm (as a tag), then we can check the disabling*/\n//var TRACKING_PREVIEW_ID = 'GA_TODO:STICKITHERE'\nvar TRACKING_LIVE_ID = 'G-30G6ZFTEJE';\n/* Users can (dis)allow different groups of cookies. */\nvar COOKIE_CATEGORIES = {\n    analytics: ['_ga', '_ga_' + TRACKING_LIVE_ID],\n    /* Essential cookies\n     *\n     * Essential cookies cannot be deselected, but we want our cookie code to\n     * only allow adding cookies that are documented in this object, so they need\n     * to be added here.\n     */\n    essential: ['service_directory_cookies_policy']\n};\n/*\n * Default cookie preferences if user has no cookie preferences.\n *\n * Note that this doesn't include a key for essential cookies, essential\n * cookies cannot be disallowed. If the object contains { essential: false }\n * this will be ignored.\n */\nvar DEFAULT_COOKIE_CONSENT = {\n    analytics: false\n};\n/*\n * Set, get, and delete cookies.\n *\n * Usage:\n *\n *   Setting a cookie:\n *   Cookie('hobnob', 'tasty', { days: 30 })\n *\n *   Reading a cookie:\n *   Cookie('hobnob')\n *\n *   Deleting a cookie:\n *   Cookie('hobnob', null)\n */\nexport function Cookie(name, value, options) {\n    if (typeof value !== 'undefined') {\n        if (value === false || value === null) {\n            deleteCookie(name);\n        }\n        else {\n            // Default expiry date of 30 days\n            if (typeof options === 'undefined') {\n                options = { days: 30 };\n            }\n            setCookie(name, value, options);\n        }\n    }\n    else {\n        return getCookie(name);\n    }\n}\n/** Return the user's cookie preferences.\n *\n * If the consent cookie is malformed, or not present,\n * returns null.\n */\nexport function getConsentCookie() {\n    var consentCookie = getCookie(CONSENT_COOKIE_NAME);\n    var consentCookieObj;\n    if (consentCookie) {\n        try {\n            consentCookieObj = JSON.parse(consentCookie);\n        }\n        catch (err) {\n            return null;\n        }\n    }\n    else {\n        return null;\n    }\n    return consentCookieObj;\n}\n/** Check the cookie preferences object.\n *\n * If the consent object is not present, malformed, or incorrect version,\n * returns false, otherwise returns true.\n *\n * This is also duplicated in cookie-banner.njk - the two need to be kept in sync\n */\nexport function isValidConsentCookie(options) {\n    return (options && options.version >= window.GDS_CONSENT_COOKIE_VERSION);\n}\n/** Update the user's cookie preferences. */\nexport function setConsentCookie(options) {\n    var cookieConsent = getConsentCookie();\n    if (!cookieConsent) {\n        cookieConsent = JSON.parse(JSON.stringify(DEFAULT_COOKIE_CONSENT));\n    }\n    // Merge current cookie preferences and new preferences\n    for (var option in options) {\n        cookieConsent[option] = options[option];\n    }\n    // Essential cookies cannot be deselected, ignore this cookie type\n    delete cookieConsent.essential;\n    cookieConsent.version = window.GDS_CONSENT_COOKIE_VERSION;\n    // Set the consent cookie\n    setCookie(CONSENT_COOKIE_NAME, JSON.stringify(cookieConsent), { days: 365 });\n    // Update the other cookies\n    resetCookies();\n}\n/** Apply the user's cookie preferences\n *\n * Deletes any cookies the user has not consented to.\n */\nexport function resetCookies() {\n    var options = getConsentCookie();\n    // If no preferences or old version use the default\n    if (!isValidConsentCookie(options)) {\n        options = JSON.parse(JSON.stringify(DEFAULT_COOKIE_CONSENT));\n    }\n    for (var cookieType in options) {\n        if (cookieType === 'version') {\n            continue;\n        }\n        // Essential cookies cannot be deselected, ignore this cookie type\n        if (cookieType === 'essential') {\n            continue;\n        }\n        // Initialise analytics if allowed\n        if (cookieType === 'analytics' && options[cookieType]) {\n            // Enable GA if allowed\n            window['ga-disable-' + TRACKING_LIVE_ID] = false;\n            Analytics();\n        }\n        else {\n            // Disable GA if not allowed\n            window['ga-disable-' + TRACKING_LIVE_ID] = true;\n        }\n        if (!options[cookieType]) {\n            // Fetch the cookies in that category\n            var cookiesInCategory = COOKIE_CATEGORIES[cookieType];\n            cookiesInCategory.forEach(function (cookie) {\n                // Delete cookie\n                Cookie(cookie, null);\n            });\n        }\n    }\n}\nfunction userAllowsCookieCategory(cookieCategory, cookiePreferences) {\n    // Essential cookies are always allowed\n    if (cookieCategory === 'essential') {\n        return true;\n    }\n    // Sometimes cookiePreferences is malformed in some of the tests, so we need to handle these\n    try {\n        return cookiePreferences[cookieCategory];\n    }\n    catch (e) {\n        console.error(e);\n        return false;\n    }\n}\nfunction userAllowsCookie(cookieName) {\n    // Always allow setting the consent cookie\n    if (cookieName === CONSENT_COOKIE_NAME) {\n        return true;\n    }\n    // Get the current cookie preferences\n    var cookiePreferences = getConsentCookie();\n    // If no preferences or old version use the default\n    if (!isValidConsentCookie(cookiePreferences)) {\n        cookiePreferences = DEFAULT_COOKIE_CONSENT;\n    }\n    for (var category in COOKIE_CATEGORIES) {\n        var cookiesInCategory = COOKIE_CATEGORIES[category];\n        if (cookiesInCategory.indexOf(cookieName) !== '-1') {\n            return userAllowsCookieCategory(category, cookiePreferences);\n        }\n    }\n    // Deny the cookie if it is not known to us\n    return false;\n}\nfunction getCookie(name) {\n    var nameEQ = name + '=';\n    var cookies = document.cookie.split(';');\n    for (var i = 0, len = cookies.length; i < len; i++) {\n        var cookie = cookies[i];\n        while (cookie.charAt(0) === ' ') {\n            cookie = cookie.substring(1, cookie.length);\n        }\n        if (cookie.indexOf(nameEQ) === 0) {\n            return decodeURIComponent(cookie.substring(nameEQ.length));\n        }\n    }\n    return null;\n}\n// do we need to set the domain?\nfunction setCookie(name, value, options) {\n    if (userAllowsCookie(name)) {\n        if (typeof options === 'undefined') {\n            options = {};\n        }\n        var cookieString = name + '=' + value + '; path=/; SameSite=Strict';\n        if (options.days) {\n            var date = new Date();\n            date.setTime(date.getTime() + (options.days * 24 * 60 * 60 * 1000));\n            cookieString = cookieString + '; expires=' + date.toUTCString();\n        }\n        if (document.location.protocol === 'https:') {\n            cookieString = cookieString + '; Secure';\n        }\n        document.cookie = cookieString;\n    }\n}\nfunction deleteCookie(name) {\n    if (Cookie(name)) {\n        // Cookies need to be deleted in the same level of specificity in which they were set\n        // If a cookie was set with a specified domain, it needs to be specified when deleted\n        // If a cookie wasn't set with the domain attribute, it shouldn't be there when deleted\n        // You can't tell if a cookie was set with a domain attribute or not, so try both options\n        document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/';\n        document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT;domain=' + window.location.hostname + ';path=/';\n        document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT;domain=.' + window.location.hostname + ';path=/';\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","/**\n * This seems to fail in IE8, requires more investigation.\n * See: https://github.com/imagitama/nodelist-foreach-polyfill\n */\nfunction nodeListForEach(nodes, callback) {\n    if (window.NodeList.prototype.forEach) {\n        return nodes.forEach(callback);\n    }\n    for (var i = 0; i < nodes.length; i++) {\n        callback.call(window, nodes[i], i, nodes);\n    }\n}\nexport { nodeListForEach };\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvaGVscGVycy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFDSCxTQUFTLGVBQWUsQ0FBQyxLQUFLLEVBQUUsUUFBUTtJQUNwQyxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRTtRQUNuQyxPQUFPLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7S0FDakM7SUFDRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNuQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFBO0tBQzVDO0FBQ0wsQ0FBQztBQUVELE9BQU8sRUFDSCxlQUFlLEVBQ2xCLENBQUEiLCJmaWxlIjoiY29tcG9uZW50cy9oZWxwZXJzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFRoaXMgc2VlbXMgdG8gZmFpbCBpbiBJRTgsIHJlcXVpcmVzIG1vcmUgaW52ZXN0aWdhdGlvbi5cclxuICogU2VlOiBodHRwczovL2dpdGh1Yi5jb20vaW1hZ2l0YW1hL25vZGVsaXN0LWZvcmVhY2gtcG9seWZpbGxcclxuICovXHJcbmZ1bmN0aW9uIG5vZGVMaXN0Rm9yRWFjaChub2RlcywgY2FsbGJhY2spIHtcclxuICAgIGlmICh3aW5kb3cuTm9kZUxpc3QucHJvdG90eXBlLmZvckVhY2gpIHtcclxuICAgICAgICByZXR1cm4gbm9kZXMuZm9yRWFjaChjYWxsYmFjaylcclxuICAgIH1cclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbm9kZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBjYWxsYmFjay5jYWxsKHdpbmRvdywgbm9kZXNbaV0sIGksIG5vZGVzKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQge1xyXG4gICAgbm9kZUxpc3RGb3JFYWNoXHJcbn0iXX0=\n","import * as CookieFunctions from './cookie-functions.js';\n/*todo: we don't meed a pollyfill for bind, as long as we server up the non js version of the site for ie8 (https://caniuse.com/?search=bind) */\n/*import 'govuk-frontend/govuk/vendor/polyfills/Function/prototype/bind'*/\n/*todo: i think we're ok for this too (see above about ie8), but we _might_ need it for >8 ie (use? https://www.npmjs.com/package/events-polyfill)*/\n/*import 'govuk-frontend/govuk/vendor/polyfills/Event'*/\nimport { nodeListForEach } from './helpers.js';\nvar cookieBannerAcceptSelector = '.js-cookie-banner-accept';\nvar cookieBannerRejectSelector = '.js-cookie-banner-reject';\nvar cookieBannerHideButtonSelector = '.js-cookie-banner-hide';\nvar cookieMessageSelector = '.js-cookie-banner-message';\nvar cookieConfirmationAcceptSelector = '.js-cookie-banner-confirmation-accept';\nvar cookieConfirmationRejectSelector = '.js-cookie-banner-confirmation-reject';\nfunction CookieBanner($module) {\n    this.$module = $module;\n}\nCookieBanner.prototype.init = function () {\n    this.$cookieBanner = this.$module;\n    this.$acceptButton = this.$module.querySelector(cookieBannerAcceptSelector);\n    this.$rejectButton = this.$module.querySelector(cookieBannerRejectSelector);\n    this.$cookieMessage = this.$module.querySelector(cookieMessageSelector);\n    this.$cookieConfirmationAccept = this.$module.querySelector(cookieConfirmationAcceptSelector);\n    this.$cookieConfirmationReject = this.$module.querySelector(cookieConfirmationRejectSelector);\n    this.$cookieBannerHideButtons = this.$module.querySelectorAll(cookieBannerHideButtonSelector);\n    // Exit if no cookie banner module\n    // or if we're on the cookies page to avoid circular journeys\n    if (!this.$cookieBanner || this.onCookiesPage()) {\n        return;\n    }\n    // Show the cookie banner to users who have not consented or have an\n    // outdated consent cookie\n    var currentConsentCookie = CookieFunctions.getConsentCookie();\n    if (!currentConsentCookie || !CookieFunctions.isValidConsentCookie(currentConsentCookie)) {\n        // If the consent cookie version is not valid, we need to remove any cookies which have been\n        // set previously\n        CookieFunctions.resetCookies();\n        this.$cookieBanner.removeAttribute('hidden');\n    }\n    this.$acceptButton.addEventListener('click', this.acceptCookies.bind(this));\n    this.$rejectButton.addEventListener('click', this.rejectCookies.bind(this));\n    nodeListForEach(this.$cookieBannerHideButtons, function ($cookieBannerHideButton) {\n        $cookieBannerHideButton.addEventListener('click', this.hideBanner.bind(this));\n    }.bind(this));\n};\nCookieBanner.prototype.hideBanner = function () {\n    this.$cookieBanner.setAttribute('hidden', true);\n};\nCookieBanner.prototype.acceptCookies = function () {\n    // Do actual cookie consent bit\n    CookieFunctions.setConsentCookie({ analytics: true });\n    // Hide banner and show confirmation message\n    this.$cookieMessage.setAttribute('hidden', true);\n    this.revealConfirmationMessage(this.$cookieConfirmationAccept);\n};\nCookieBanner.prototype.rejectCookies = function () {\n    // Do actual cookie consent bit\n    CookieFunctions.setConsentCookie({ analytics: false });\n    // Hide banner and show confirmation message\n    this.$cookieMessage.setAttribute('hidden', true);\n    this.revealConfirmationMessage(this.$cookieConfirmationReject);\n};\nCookieBanner.prototype.revealConfirmationMessage = function (confirmationMessage) {\n    confirmationMessage.removeAttribute('hidden');\n    // Set tabindex to -1 to make the confirmation banner focusable with JavaScript\n    if (!confirmationMessage.getAttribute('tabindex')) {\n        confirmationMessage.setAttribute('tabindex', '-1');\n        confirmationMessage.addEventListener('blur', function () {\n            confirmationMessage.removeAttribute('tabindex');\n        });\n    }\n    confirmationMessage.focus();\n};\nCookieBanner.prototype.onCookiesPage = function () {\n    return window.location.pathname === '/cookies/';\n};\nexport default CookieBanner;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudHMvY29va2llLWJhbm5lci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssZUFBZSxNQUFNLHVCQUF1QixDQUFBO0FBQ3hELGdKQUFnSjtBQUNoSiwwRUFBMEU7QUFDMUUsb0pBQW9KO0FBQ3BKLHdEQUF3RDtBQUN4RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sY0FBYyxDQUFBO0FBRTlDLElBQUksMEJBQTBCLEdBQUcsMEJBQTBCLENBQUE7QUFDM0QsSUFBSSwwQkFBMEIsR0FBRywwQkFBMEIsQ0FBQTtBQUMzRCxJQUFJLDhCQUE4QixHQUFHLHdCQUF3QixDQUFBO0FBQzdELElBQUkscUJBQXFCLEdBQUcsMkJBQTJCLENBQUE7QUFDdkQsSUFBSSxnQ0FBZ0MsR0FBRyx1Q0FBdUMsQ0FBQTtBQUM5RSxJQUFJLGdDQUFnQyxHQUFHLHVDQUF1QyxDQUFBO0FBRTlFLFNBQVMsWUFBWSxDQUFDLE9BQU87SUFDekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUE7QUFDMUIsQ0FBQztBQUVELFlBQVksQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHO0lBQzFCLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQTtJQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLDBCQUEwQixDQUFDLENBQUE7SUFDM0UsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQywwQkFBMEIsQ0FBQyxDQUFBO0lBQzNFLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMscUJBQXFCLENBQUMsQ0FBQTtJQUN2RSxJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsZ0NBQWdDLENBQUMsQ0FBQTtJQUM3RixJQUFJLENBQUMseUJBQXlCLEdBQUcsSUFBSSxD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bkQsQ0FBQyxDQUFDLENBQUE7S0FDTDtJQUVELG1CQUFtQixDQUFDLEtBQUssRUFBRSxDQUFBO0FBQy9CLENBQUMsQ0FBQTtBQUVELFlBQVksQ0FBQyxTQUFTLENBQUMsYUFBYSxHQUFHO0lBQ25DLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEtBQUssV0FBVyxDQUFBO0FBQ25ELENBQUMsQ0FBQTtBQUVELGVBQWUsWUFBWSxDQUFBIiwiZmlsZSI6ImNvbXBvbmVudHMvY29va2llLWJhbm5lci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIENvb2tpZUZ1bmN0aW9ucyBmcm9tICcuL2Nvb2tpZS1mdW5jdGlvbnMuanMnXHJcbi8qdG9kbzogd2UgZG9uJ3QgbWVlZCBhIHBvbGx5ZmlsbCBmb3IgYmluZCwgYXMgbG9uZyBhcyB3ZSBzZXJ2ZXIgdXAgdGhlIG5vbiBqcyB2ZXJzaW9uIG9mIHRoZSBzaXRlIGZvciBpZTggKGh0dHBzOi8vY2FuaXVzZS5jb20vP3NlYXJjaD1iaW5kKSAqL1xyXG4vKmltcG9ydCAnZ292dWstZnJvbnRlbmQvZ292dWsvdmVuZG9yL3BvbHlmaWxscy9GdW5jdGlvbi9wcm90b3R5cGUvYmluZCcqL1xyXG4vKnRvZG86IGkgdGhpbmsgd2UncmUgb2sgZm9yIHRoaXMgdG9vIChzZWUgYWJvdmUgYWJvdXQgaWU4KSwgYnV0IHdlIF9taWdodF8gbmVlZCBpdCBmb3IgPjggaWUgKHVzZT8gaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvZXZlbnRzLXBvbHlmaWxsKSovXHJcbi8qaW1wb3J0ICdnb3Z1ay1mcm9udGVuZC9nb3Z1ay92ZW5kb3IvcG9seWZpbGxzL0V2ZW50JyovXHJcbmltcG9ydCB7IG5vZGVMaXN0Rm9yRWFjaCB9IGZyb20gJy4vaGVscGVycy5qcydcclxuXHJcbnZhciBjb29raWVCYW5uZXJBY2NlcHRTZWxlY3RvciA9ICcuanMtY29va2llLWJhbm5lci1hY2NlcHQnXHJcbnZhciBjb29raWVCYW5uZXJSZWplY3RTZWxlY3RvciA9ICcuanMtY29va2llLWJhbm5lci1yZWplY3QnXHJcbnZhciBjb29raWVCYW5uZXJIaWRlQnV0dG9uU2VsZWN0b3IgPSAnLmpzLWNvb2tpZS1iYW5uZXItaGlkZSdcclxudmFyIGNvb2tpZU1lc3NhZ2VTZWxlY3RvciA9ICcuanMtY29va2llLWJhbm5lci1tZXNzYWdlJ1xyXG52YXIgY29va2llQ29uZmlybWF0aW9uQWNjZXB0U2VsZWN0b3IgPSAnLmpzLWNvb2tpZS1iYW5uZXItY29uZmlybWF0aW9uLWFjY2VwdCdcclxudmFyIGNvb2tpZUNvbmZpcm1hdGlvblJlamVjdFNlbGVjdG9yID0gJy5qcy1jb29raWUtYmFubmVyLWNvbmZpcm1hdGlvbi1yZWplY3QnXHJcblxyXG5mdW5jdGlvbiBDb29raWVCYW5uZXIoJG1vZHVsZSkge1xyXG4gICAgdGhpcy4kbW9kdWxlID0gJG1vZHVsZVxyXG59XHJcblxyXG5Db29raWVCYW5uZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLiRjb29raWVCYW5uZXIgPSB0aGlzLiRtb2R1bGVcclxuICAgIHRoaXMuJGFjY2VwdEJ1dHRvbiA9IHRoaXMuJG1vZHVsZS5xdWVyeVNlbGVjdG9yKGNvb2tpZUJhbm5lckFjY2VwdFNlbGVjdG9yKVxyXG4gICAgdGhpcy4kcmVqZWN0QnV0dG9uID0gdGhpcy4kbW9kdWxlLnF1ZXJ5U2VsZWN0b3IoY29va2llQmFubmVyUmVqZWN0U2VsZWN0b3IpXHJcbiAgICB0aGlzLiRjb29raWVNZXNzYWdlID0gdGhpcy4kbW9kdWxlLnF1ZXJ5U2VsZWN0b3IoY29va2llTWVzc2FnZVNlbGVjdG9yKVxyXG4gICAgdGhpcy4kY29va2llQ29uZmlybWF0aW9uQWNjZXB0ID0gdGhpcy4kbW9kdWxlLnF1ZXJ5U2VsZWN0b3IoY29va2llQ29uZmlybWF0aW9uQWNjZXB0U2VsZWN0b3IpXHJcbiAgICB0aGlzLiRjb29raWVDb25maXJtYXRpb25SZWplY3QgPSB0aGlzLiRtb2R1bGUucXVlcnlTZWxlY3Rvcihjb29raWVDb25maXJtYXRpb25SZWplY3RTZWxlY3RvcilcclxuICAgIHRoaXMuJGNvb2tpZUJhbm5lckhpZGVCdXR0b25zID0gdGhpcy4kbW9kdWxlLnF1ZXJ5U2VsZWN0b3JBbGwoY29va2llQmFubmVySGlkZUJ1dHRvblNlbGVjdG9yKVxyXG5cclxuICAgIC8vIEV4aXQgaWYgbm8gY29va2llIGJhbm5lciBtb2R1bGVcclxuICAgIC8vIG9yIGlmIHdlJ3JlIG9uIHRoZSBjb29raWVzIHBhZ2UgdG8gYXZvaWQgY2lyY3VsYXIgam91cm5leXNcclxuICAgIGlmICghdGhpcy4kY29va2llQmFubmVyIHx8IHRoaXMub25Db29raWVzUGFnZSgpKSB7XHJcbiAgICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgLy8gU2hvdyB0aGUgY29va2llIGJhbm5lciB0byB1c2VycyB3aG8gaGF2ZSBub3QgY29uc2VudGVkIG9yIGhhdmUgYW5cclxuICAgIC8vIG91dGRhdGVkIGNvbnNlbnQgY29va2llXHJcbiAgICB2YXIgY3VycmVudENvbnNlbnRDb29raWUgPSBDb29raWVGdW5jdGlvbnMuZ2V0Q29uc2VudENvb2tpZSgpXHJcblxyXG4gICAgaWYgKCFjdXJyZW50Q29uc2VudENvb2tpZSB8fCAhQ29va2llRnVuY3Rpb25zLmlzVmFsaWRDb25zZW50Q29va2llKGN1cnJlbnRDb25zZW50Q29va2llKSkge1xyXG4gICAgICAgIC8vIElmIHRoZSBjb25zZW50IGNvb2tpZSB2ZXJzaW9uIGlzIG5vdCB2YWxpZCwgd2UgbmVlZCB0byByZW1vdmUgYW55IGNvb2tpZXMgd2hpY2ggaGF2ZSBiZWVuXHJcbiAgICAgICAgLy8gc2V0IHByZXZpb3VzbHlcclxuICAgICAgICBDb29raWVGdW5jdGlvbnMucmVzZXRDb29raWVzKClcclxuXHJcbiAgICAgICAgdGhpcy4kY29va2llQmFubmVyLnJlbW92ZUF0dHJpYnV0ZSgnaGlkZGVuJylcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiRhY2NlcHRCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmFjY2VwdENvb2tpZXMuYmluZCh0aGlzKSlcclxuICAgIHRoaXMuJHJlamVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMucmVqZWN0Q29va2llcy5iaW5kKHRoaXMpKVxyXG5cclxuICAgIG5vZGVMaXN0Rm9yRWFjaCh0aGlzLiRjb29raWVCYW5uZXJIaWRlQnV0dG9ucywgZnVuY3Rpb24gKCRjb29raWVCYW5uZXJIaWRlQnV0dG9uKSB7XHJcbiAgICAgICAgJGNvb2tpZUJhbm5lckhpZGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhpZGVCYW5uZXIuYmluZCh0aGlzKSlcclxuICAgIH0uYmluZCh0aGlzKSlcclxufVxyXG5cclxuQ29va2llQmFubmVyLnByb3RvdHlwZS5oaWRlQmFubmVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy4kY29va2llQmFubmVyLnNldEF0dHJpYnV0ZSgnaGlkZGVuJywgdHJ1ZSlcclxufVxyXG5cclxuQ29va2llQmFubmVyLnByb3RvdHlwZS5hY2NlcHRDb29raWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gRG8gYWN0dWFsIGNvb2tpZSBjb25zZW50IGJpdFxyXG4gICAgQ29va2llRnVuY3Rpb25zLnNldENvbnNlbnRDb29raWUoeyBhbmFseXRpY3M6IHRydWUgfSlcclxuXHJcbiAgICAvLyBIaWRlIGJhbm5lciBhbmQgc2hvdyBjb25maXJtYXRpb24gbWVzc2FnZVxyXG4gICAgdGhpcy4kY29va2llTWVzc2FnZS5zZXRBdHRyaWJ1dGUoJ2hpZGRlbicsIHRydWUpXHJcbiAgICB0aGlzLnJldmVhbENvbmZpcm1hdGlvbk1lc3NhZ2UodGhpcy4kY29va2llQ29uZmlybWF0aW9uQWNjZXB0KVxyXG59XHJcblxyXG5Db29raWVCYW5uZXIucHJvdG90eXBlLnJlamVjdENvb2tpZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBEbyBhY3R1YWwgY29va2llIGNvbnNlbnQgYml0XHJcbiAgICBDb29raWVGdW5jdGlvbnMuc2V0Q29uc2VudENvb2tpZSh7IGFuYWx5dGljczogZmFsc2UgfSlcclxuXHJcbiAgICAvLyBIaWRlIGJhbm5lciBhbmQgc2hvdyBjb25maXJtYXRpb24gbWVzc2FnZVxyXG4gICAgdGhpcy4kY29va2llTWVzc2FnZS5zZXRBdHRyaWJ1dGUoJ2hpZGRlbicsIHRydWUpXHJcbiAgICB0aGlzLnJldmVhbENvbmZpcm1hdGlvbk1lc3NhZ2UodGhpcy4kY29va2llQ29uZmlybWF0aW9uUmVqZWN0KVxyXG59XHJcblxyXG5Db29raWVCYW5uZXIucHJvdG90eXBlLnJldmVhbENvbmZpcm1hdGlvbk1lc3NhZ2UgPSBmdW5jdGlvbiAoY29uZmlybWF0aW9uTWVzc2FnZSkge1xyXG4gICAgY29uZmlybWF0aW9uTWVzc2FnZS5yZW1vdmVBdHRyaWJ1dGUoJ2hpZGRlbicpXHJcblxyXG4gICAgLy8gU2V0IHRhYmluZGV4IHRvIC0xIHRvIG1ha2UgdGhlIGNvbmZpcm1hdGlvbiBiYW5uZXIgZm9jdXNhYmxlIHdpdGggSmF2YVNjcmlwdFxyXG4gICAgaWYgKCFjb25maXJtYXRpb25NZXNzYWdlLmdldEF0dHJpYnV0ZSgndGFiaW5kZXgnKSkge1xyXG4gICAgICAgIGNvbmZpcm1hdGlvbk1lc3NhZ2Uuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICctMScpXHJcblxyXG4gICAgICAgIGNvbmZpcm1hdGlvbk1lc3NhZ2UuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgY29uZmlybWF0aW9uTWVzc2FnZS5yZW1vdmVBdHRyaWJ1dGUoJ3RhYmluZGV4JylcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGNvbmZpcm1hdGlvbk1lc3NhZ2UuZm9jdXMoKVxyXG59XHJcblxyXG5Db29raWVCYW5uZXIucHJvdG90eXBlLm9uQ29va2llc1BhZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lID09PSAnL2Nvb2tpZXMvJ1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb29raWVCYW5uZXIiXX0=\n","import { getConsentCookie, setConsentCookie } from './cookie-functions.js';\nimport { nodeListForEach } from './helpers.js';\nfunction CookiesPage($module) {\n    this.$module = $module;\n}\nCookiesPage.prototype.init = function () {\n    this.$cookiePage = this.$module;\n    if (!this.$cookiePage) {\n        return;\n    }\n    this.$cookieForm = this.$cookiePage.querySelector('.js-cookies-page-form');\n    this.$cookieFormFieldsets = this.$cookieForm.querySelectorAll('.js-cookies-page-form-fieldset');\n    this.$successNotification = this.$cookiePage.querySelector('.js-cookies-page-success');\n    this.$successLink = this.$cookiePage.querySelector('.js-cookies-page-success-link');\n    nodeListForEach(this.$cookieFormFieldsets, function ($cookieFormFieldset) {\n        this.showUserPreference($cookieFormFieldset, getConsentCookie());\n        /*        $cookieFormFieldset.removeAttribute('hidden')*/\n    }.bind(this));\n    // Show submit button\n    //this.$cookieForm.querySelector('.js-cookies-form-button').removeAttribute('hidden')\n    this.$cookieForm.addEventListener('submit', this.savePreferences.bind(this));\n};\nCookiesPage.prototype.savePreferences = function (event) {\n    // Stop default form submission behaviour\n    event.preventDefault();\n    var preferences = {};\n    nodeListForEach(this.$cookieFormFieldsets, function ($cookieFormFieldset) {\n        var cookieType = this.getCookieType($cookieFormFieldset);\n        var selectedItem = $cookieFormFieldset.querySelector('input[name=' + cookieType + ']:checked').value;\n        preferences[cookieType] = selectedItem === 'true';\n    }.bind(this));\n    // Save preferences to cookie and show success notification\n    setConsentCookie(preferences);\n    // handle the corner case, where the user has selected their preference on the cookie page, whilst the banner is still open as they haven't previously selected their preference\n    //todo: call hideBanner\n    var banner = document.querySelector('[data-module=\"govuk-cookie-banner\"]');\n    banner.setAttribute('hidden', 'true');\n    this.showSuccessNotification();\n};\nCookiesPage.prototype.showUserPreference = function ($cookieFormFieldset, preferences) {\n    var cookieType = this.getCookieType($cookieFormFieldset);\n    var preference = false;\n    if (cookieType && preferences && preferences[cookieType] !== undefined) {\n        preference = preferences[cookieType];\n    }\n    var radioValue = preference ? 'true' : 'false';\n    var radio = $cookieFormFieldset.querySelector('input[name=' + cookieType + '][value=' + radioValue + ']');\n    radio.checked = true;\n};\nCookiesPage.prototype.showSuccessNotification = function () {\n    this.$successNotification.removeAttribute('hidden');\n    // if the user's come to the cookies page through the link in the cookie banner, show a link to take them back to the page they came from\n    var referrer = document.referrer ? new URL(document.referrer).pathname : false;\n    if (referrer && referrer !== document.location.pathname) {\n        this.$successLink.href = referrer;\n        this.$successLink.removeAttribute('hidden');\n    }\n    else {\n        this.$successLink.setAttribute('hidden', 'true');\n    }\n    // Set tabindex to -1 to make the element focusable with JavaScript.\n    // GOV.UK Frontend will remove the tabindex on blur as the component doesn't\n    // need to be focusable after the user has read the text.\n    if (!this.$successNotification.getAttribute('tabindex')) {\n        this.$successNotification.setAttribute('tabindex', '-1');\n    }\n    this.$successNotification.focus();\n    // scroll to the top of the page\n    window.scrollTo(0, 0);\n};\nCookiesPage.prototype.getCookieType = function ($cookieFormFieldset) {\n    return $cookieFormFieldset.id;\n};\nexport default CookiesPage;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// js components have been snaffled from https://github.com/alphagov/govuk-design-system/blob/main/src/javascripts/components/\nimport CookieBanner from './components/cookie-banner.js';\nimport { getConsentCookie, isValidConsentCookie } from './components/cookie-functions.js';\nimport Analytics from './components/analytics.js';\nimport CookiesPage from './components/cookies-page.js';\n// Initialise cookie banner\nvar $cookieBanner = document.querySelector('[data-module=\"govuk-cookie-banner\"]');\nnew CookieBanner($cookieBanner).init();\n// Initialise analytics if consent is given\nvar userConsent = getConsentCookie();\nif (userConsent && isValidConsentCookie(userConsent) && userConsent.analytics) {\n    Analytics();\n}\n//todo: move this into scripts section on cookie page\n// Initialise cookie page\nvar $cookiesPage = document.querySelector('[data-module=\"app-cookies-page\"]');\nnew CookiesPage($cookiesPage).init();\nconst backLinks = document.querySelectorAll(\".app-back-link\");\nbackLinks.forEach((link) => {\n    link.addEventListener(\"click\", () => {\n        window.history.back();\n    });\n});\nconst button = document.getElementById('open-close-filters');\nbutton === null || button === void 0 ? void 0 : button.addEventListener('click', function handleClick(event) {\n    //todo: update to ts 2?\n    const filterButton = document.getElementById(\"filters\");\n    if (filterButton.style.display === \"none\") {\n        filterButton.style.display = \"block\";\n    }\n    else {\n        filterButton.style.display = \"none\";\n    }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4SEFBOEg7QUFROUgsT0FBTyxZQUFZLE1BQU0sK0JBQStCLENBQUE7QUFDeEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sa0NBQWtDLENBQUE7QUFDekYsT0FBTyxTQUFTLE1BQU0sMkJBQTJCLENBQUE7QUFDakQsT0FBTyxXQUFXLE1BQU0sOEJBQThCLENBQUE7QUFFdEQsMkJBQTJCO0FBQzNCLElBQUksYUFBYSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMscUNBQXFDLENBQUMsQ0FBQTtBQUNqRixJQUFJLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtBQUV0QywyQ0FBMkM7QUFDM0MsSUFBSSxXQUFXLEdBQUcsZ0JBQWdCLEVBQUUsQ0FBQTtBQUNwQyxJQUFJLFdBQVcsSUFBSSxvQkFBb0IsQ0FBQyxXQUFXLENBQUMsSUFBSSxXQUFXLENBQUMsU0FBUyxFQUFFO0lBQzNFLFNBQVMsRUFBRSxDQUFBO0NBQ2Q7QUFFRCxxREFBcUQ7QUFDckQseUJBQXlCO0FBQ3pCLElBQUksWUFBWSxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsa0NBQWtDLENBQUMsQ0FBQTtBQUM3RSxJQUFJLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQTtBQUVwQyxNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztBQUM5RCxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBdUIsRUFBRSxFQUFFO0lBQzFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFO1FBQ2hDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDMUIsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQztBQUVILE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUM3RCxNQUFNLGFBQU4sTUFBTSx1QkFBTixNQUFNLENBQUUsZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFNBQVMsV0FBVyxDQUFDLEtBQUs7SUFDeEQsdUJBQXVCO0lBQ3ZCLE1BQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUEwQixDQUFDO0lBQ2pGLElBQUksWUFBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLEtBQUssTUFBTSxFQUFFO1FBQ3ZDLFlBQVksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztLQUN4QztTQUFNO1FBQ0gsWUFBWSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO0tBQ3ZDO0FBQ0wsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8ganMgY29tcG9uZW50cyBoYXZlIGJlZW4gc25hZmZsZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWxwaGFnb3YvZ292dWstZGVzaWduLXN5c3RlbS9ibG9iL21haW4vc3JjL2phdmFzY3JpcHRzL2NvbXBvbmVudHMvXHJcblxyXG5kZWNsYXJlIGdsb2JhbCB7XHJcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcclxuICAgICAgICBHRFNfQ09OU0VOVF9DT09LSUVfVkVSU0lPTjogYW55O1xyXG4gICAgfVxyXG59XHJcblxyXG5pbXBvcnQgQ29va2llQmFubmVyIGZyb20gJy4vY29tcG9uZW50cy9jb29raWUtYmFubmVyLmpzJ1xyXG5pbXBvcnQgeyBnZXRDb25zZW50Q29va2llLCBpc1ZhbGlkQ29uc2VudENvb2tpZSB9IGZyb20gJy4vY29tcG9uZW50cy9jb29raWUtZnVuY3Rpb25zLmpzJ1xyXG5pbXBvcnQgQW5hbHl0aWNzIGZyb20gJy4vY29tcG9uZW50cy9hbmFseXRpY3MuanMnXHJcbmltcG9ydCBDb29raWVzUGFnZSBmcm9tICcuL2NvbXBvbmVudHMvY29va2llcy1wYWdlLmpzJ1xyXG5cclxuLy8gSW5pdGlhbGlzZSBjb29raWUgYmFubmVyXHJcbnZhciAkY29va2llQmFubmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbW9kdWxlPVwiZ292dWstY29va2llLWJhbm5lclwiXScpXHJcbm5ldyBDb29raWVCYW5uZXIoJGNvb2tpZUJhbm5lcikuaW5pdCgpXHJcblxyXG4vLyBJbml0aWFsaXNlIGFuYWx5dGljcyBpZiBjb25zZW50IGlzIGdpdmVuXHJcbnZhciB1c2VyQ29uc2VudCA9IGdldENvbnNlbnRDb29raWUoKVxyXG5pZiAodXNlckNvbnNlbnQgJiYgaXNWYWxpZENvbnNlbnRDb29raWUodXNlckNvbnNlbnQpICYmIHVzZXJDb25zZW50LmFuYWx5dGljcykge1xyXG4gICAgQW5hbHl0aWNzKClcclxufVxyXG5cclxuLy90b2RvOiBtb3ZlIHRoaXMgaW50byBzY3JpcHRzIHNlY3Rpb24gb24gY29va2llIHBhZ2VcclxuLy8gSW5pdGlhbGlzZSBjb29raWUgcGFnZVxyXG52YXIgJGNvb2tpZXNQYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbW9kdWxlPVwiYXBwLWNvb2tpZXMtcGFnZVwiXScpXHJcbm5ldyBDb29raWVzUGFnZSgkY29va2llc1BhZ2UpLmluaXQoKVxyXG5cclxuY29uc3QgYmFja0xpbmtzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5hcHAtYmFjay1saW5rXCIpO1xyXG5iYWNrTGlua3MuZm9yRWFjaCgobGluazogSFRNTEFuY2hvckVsZW1lbnQpID0+IHtcclxuICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICB3aW5kb3cuaGlzdG9yeS5iYWNrKCk7XHJcbiAgICB9KTtcclxufSk7XHJcblxyXG5jb25zdCBidXR0b24gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnb3Blbi1jbG9zZS1maWx0ZXJzJyk7XHJcbmJ1dHRvbj8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiBoYW5kbGVDbGljayhldmVudCkge1xyXG4gICAgLy90b2RvOiB1cGRhdGUgdG8gdHMgMj9cclxuICAgIGNvbnN0IGZpbHRlckJ1dHRvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZmlsdGVyc1wiKSBhcyBIVE1MRGl2RWxlbWVudCB8IG51bGw7XHJcbiAgICBpZiAoZmlsdGVyQnV0dG9uLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiKSB7XHJcbiAgICAgICAgZmlsdGVyQnV0dG9uLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGZpbHRlckJ1dHRvbi5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XHJcbiAgICB9XHJcbn0pO1xyXG4iXX0=\n\n(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :\r\n\ttypeof define === 'function' && define.amd ? define('GOVUKFrontend', ['exports'], factory) :\r\n\t(factory((global.GOVUKFrontend = {})));\r\n}(this, (function (exports) { 'use strict';\r\n\r\n/**\r\n * Common helpers which do not require polyfill.\r\n *\r\n * IMPORTANT: If a helper require a polyfill, please isolate it in its own module\r\n * so that the polyfill can be properly tree-shaken and does not burden\r\n * the components that do not need that helper\r\n *\r\n * @module common/index\r\n */\r\n\r\n/**\r\n * TODO: Ideally this would be a NodeList.prototype.forEach polyfill\r\n * This seems to fail in IE8, requires more investigation.\r\n * See: https://github.com/imagitama/nodelist-foreach-polyfill\r\n *\r\n * @param {NodeListOf<Element>} nodes - NodeList from querySelectorAll()\r\n * @param {nodeListIterator} callback - Callback function to run for each node\r\n * @returns {undefined}\r\n */\r\nfunction nodeListForEach (nodes, callback) {\r\n  if (window.NodeList.prototype.forEach) {\r\n    return nodes.forEach(callback)\r\n  }\r\n  for (var i = 0; i < nodes.length; i++) {\r\n    callback.call(window, nodes[i], i, nodes);\r\n  }\r\n}\r\n\r\n/**\r\n * Used to generate a unique string, allows multiple instances of the component\r\n * without them conflicting with each other.\r\n * https://stackoverflow.com/a/8809472\r\n *\r\n * @returns {string} Unique ID\r\n */\r\nfunction generateUniqueID () {\r\n  var d = new Date().getTime();\r\n  if (typeof window.performance !== 'undefined' && typeof window.performance.now === 'function') {\r\n    d += window.performance.now(); // use high-precision timer if available\r\n  }\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n    var r = (d + Math.random() * 16) % 16 | 0;\r\n    d = Math.floor(d / 16);\r\n    return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16)\r\n  })\r\n}\r\n\r\n/**\r\n * Config flattening function\r\n *\r\n * Takes any number of objects, flattens them into namespaced key-value pairs,\r\n * (e.g. {'i18n.showSection': 'Show section'}) and combines them together, with\r\n * greatest priority on the LAST item passed in.\r\n *\r\n * @returns {object} A flattened object of key-value pairs.\r\n */\r\nfunction mergeConfigs (/* configObject1, configObject2, ...configObjects */) {\r\n  /**\r\n   * Function to take nested objects and flatten them to a dot-separated keyed\r\n   * object. Doing this means we don't need to do any deep/recursive merging of\r\n   * each of our objects, nor transform our dataset from a flat list into a\r\n   * nested object.\r\n   *\r\n   * @param {object} configObject - Deeply nested object\r\n   * @returns {object} Flattened object with dot-separated keys\r\n   */\r\n  var flattenObject = function (configObject) {\r\n    // Prepare an empty return object\r\n    var flattenedObject = {};\r\n\r\n    // Our flattening function, this is called recursively for each level of\r\n    // depth in the object. At each level we prepend the previous level names to\r\n    // the key using `prefix`.\r\n    var flattenLoop = function (obj, prefix) {\r\n      // Loop through keys...\r\n      for (var key in obj) {\r\n        // Check to see if this is a prototypical key/value,\r\n        // if it is, skip it.\r\n        if (!Object.prototype.hasOwnProperty.call(obj, key)) {\r\n          continue\r\n        }\r\n        var value = obj[key];\r\n        var prefixedKey = prefix ? prefix + '.' + key : key;\r\n        if (typeof value === 'object') {\r\n          // If the value is a nested object, recurse over that too\r\n          flattenLoop(value, prefixedKey);\r\n        } else {\r\n          // Otherwise, add this value to our return object\r\n          flattenedObject[prefixedKey] = value;\r\n        }\r\n      }\r\n    };\r\n\r\n    // Kick off the recursive loop\r\n    flattenLoop(configObject);\r\n    return flattenedObject\r\n  };\r\n\r\n  // Start with an empty object as our base\r\n  var formattedConfigObject = {};\r\n\r\n  // Loop through each of the remaining passed objects and push their keys\r\n  // one-by-one into configObject. Any duplicate keys will override the existing\r\n  // key with the new value.\r\n  for (var i = 0; i < arguments.length; i++) {\r\n    var obj = flattenObject(arguments[i]);\r\n    for (var key in obj) {\r\n      if (Object.prototype.hasOwnProperty.call(obj, key)) {\r\n        formattedConfigObject[key] = obj[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  return formattedConfigObject\r\n}\r\n\r\n/**\r\n * Extracts keys starting with a particular namespace from a flattened config\r\n * object, removing the namespace in the process.\r\n *\r\n * @param {object} configObject - The object to extract key-value pairs from.\r\n * @param {string} namespace - The namespace to filter keys with.\r\n * @returns {object} Flattened object with dot-separated key namespace removed\r\n */\r\nfunction extractConfigByNamespace (configObject, namespace) {\r\n  // Check we have what we need\r\n  if (!configObject || typeof configObject !== 'object') {\r\n    throw new Error('Provide a `configObject` of type \"object\".')\r\n  }\r\n  if (!namespace || typeof namespace !== 'string') {\r\n    throw new Error('Provide a `namespace` of type \"string\" to filter the `configObject` by.')\r\n  }\r\n  var newObject = {};\r\n  for (var key in configObject) {\r\n    // Split the key into parts, using . as our namespace separator\r\n    var keyParts = key.split('.');\r\n    // Check if the first namespace matches the configured namespace\r\n    if (Object.prototype.hasOwnProperty.call(configObject, key) && keyParts[0] === namespace) {\r\n      // Remove the first item (the namespace) from the parts array,\r\n      // but only if there is more than one part (we don't want blank keys!)\r\n      if (keyParts.length > 1) {\r\n        keyParts.shift();\r\n      }\r\n      // Join the remaining parts back together\r\n      var newKey = keyParts.join('.');\r\n      // Add them to our new object\r\n      newObject[newKey] = configObject[key];\r\n    }\r\n  }\r\n  return newObject\r\n}\r\n\r\n/**\r\n * @callback nodeListIterator\r\n * @param {Element} value - The current node being iterated on\r\n * @param {number} index - The current index in the iteration\r\n * @param {NodeListOf<Element>} nodes - NodeList from querySelectorAll()\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Internal support for selecting messages to render, with placeholder\r\n * interpolation and locale-aware number formatting and pluralisation\r\n *\r\n * @class\r\n * @private\r\n * @param {TranslationsFlattened} translations - Key-value pairs of the translation strings to use.\r\n * @param {object} [config] - Configuration options for the function.\r\n * @param {string} config.locale - An overriding locale for the PluralRules functionality.\r\n */\r\nfunction I18n (translations, config) {\r\n  // Make list of translations available throughout function\r\n  this.translations = translations || {};\r\n\r\n  // The locale to use for PluralRules and NumberFormat\r\n  this.locale = (config && config.locale) || document.documentElement.lang || 'en';\r\n}\r\n\r\n/**\r\n * The most used function - takes the key for a given piece of UI text and\r\n * returns the appropriate string.\r\n *\r\n * @param {string} lookupKey - The lookup key of the string to use.\r\n * @param {object} options - Any options passed with the translation string, e.g: for string interpolation.\r\n * @returns {string} The appropriate translation string.\r\n */\r\nI18n.prototype.t = function (lookupKey, options) {\r\n  if (!lookupKey) {\r\n    // Print a console error if no lookup key has been provided\r\n    throw new Error('i18n: lookup key missing')\r\n  }\r\n\r\n  // If the `count` option is set, determine which plural suffix is needed and\r\n  // change the lookupKey to match. We check to see if it's undefined instead of\r\n  // falsy, as this could legitimately be 0.\r\n  if (options && typeof options.count !== 'undefined') {\r\n    // Get the plural suffix\r\n    lookupKey = lookupKey + '.' + this.getPluralSuffix(lookupKey, options.count);\r\n  }\r\n\r\n  if (lookupKey in this.translations) {\r\n    // Fetch the translation string for that lookup key\r\n    var translationString = this.translations[lookupKey];\r\n\r\n    // Check for ${} placeholders in the translation string\r\n    if (translationString.match(/%{(.\\S+)}/)) {\r\n      if (!options) {\r\n        throw new Error('i18n: cannot replace placeholders in string if no option data provided')\r\n      }\r\n\r\n      return this.replacePlaceholders(translationString, options)\r\n    } else {\r\n      return translationString\r\n    }\r\n  } else {\r\n    // If the key wasn't found in our translations object,\r\n    // return the lookup key itself as the fallback\r\n    return lookupKey\r\n  }\r\n};\r\n\r\n/**\r\n * Takes a translation string with placeholders, and replaces the placeholders\r\n * with the provided data\r\n *\r\n * @param {string} translationString - The translation string\r\n * @param {object} options - Any options passed with the translation string, e.g: for string interpolation.\r\n * @returns {string} The translation string to output, with ${} placeholders replaced\r\n */\r\nI18n.prototype.replacePlaceholders = function (translationString, options) {\r\n  var formatter;\r\n\r\n  if (this.hasIntlNumberFormatSupport()) {\r\n    formatter = new Intl.NumberFormat(this.locale);\r\n  }\r\n\r\n  return translationString.replace(/%{(.\\S+)}/g, function (placeholderWithBraces, placeholderKey) {\r\n    if (Object.prototype.hasOwnProperty.call(options, placeholderKey)) {\r\n      var placeholderValue = options[placeholderKey];\r\n\r\n      // If a user has passed `false` as the value for the placeholder\r\n      // treat it as though the value should not be displayed\r\n      if (placeholderValue === false) {\r\n        return ''\r\n      }\r\n\r\n      // If the placeholder's value is a number, localise the number formatting\r\n      if (typeof placeholderValue === 'number' && formatter) {\r\n        return formatter.format(placeholderValue)\r\n      }\r\n\r\n      return placeholderValue\r\n    } else {\r\n      throw new Error('i18n: no data found to replace ' + placeholderWithBraces + ' placeholder in string')\r\n    }\r\n  })\r\n};\r\n\r\n/**\r\n * Check to see if the browser supports Intl and Intl.PluralRules.\r\n *\r\n * It requires all conditions to be met in order to be supported:\r\n * - The browser supports the Intl class (true in IE11)\r\n * - The implementation of Intl supports PluralRules (NOT true in IE11)\r\n * - The browser/OS has plural rules for the current locale (browser dependent)\r\n *\r\n * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\r\n */\r\nI18n.prototype.hasIntlPluralRulesSupport = function () {\r\n  return Boolean(window.Intl && ('PluralRules' in window.Intl && Intl.PluralRules.supportedLocalesOf(this.locale).length))\r\n};\r\n\r\n/**\r\n * Check to see if the browser supports Intl and Intl.NumberFormat.\r\n *\r\n * It requires all conditions to be met in order to be supported:\r\n * - The browser supports the Intl class (true in IE11)\r\n * - The implementation of Intl supports NumberFormat (also true in IE11)\r\n * - The browser/OS has number formatting rules for the current locale (browser dependent)\r\n *\r\n * @returns {boolean} Returns true if all conditions are met. Returns false otherwise.\r\n */\r\nI18n.prototype.hasIntlNumberFormatSupport = function () {\r\n  return Boolean(window.Intl && ('NumberFormat' in window.Intl && Intl.NumberFormat.supportedLocalesOf(this.locale).length))\r\n};\r\n\r\n/**\r\n * Get the appropriate suffix for the plural form.\r\n *\r\n * Uses Intl.PluralRules (or our own fallback implementation) to get the\r\n * 'preferred' form to use for the given count.\r\n *\r\n * Checks that a translation has been provided for that plural form – if it\r\n * hasn't, it'll fall back to the 'other' plural form (unless that doesn't exist\r\n * either, in which case an error will be thrown)\r\n *\r\n * @param {string} lookupKey - The lookup key of the string to use.\r\n * @param {number} count - Number used to determine which pluralisation to use.\r\n * @returns {PluralRule} The suffix associated with the correct pluralisation for this locale.\r\n */\r\nI18n.prototype.getPluralSuffix = function (lookupKey, count) {\r\n  // Validate that the number is actually a number.\r\n  //\r\n  // Number(count) will turn anything that can't be converted to a Number type\r\n  // into 'NaN'. isFinite filters out NaN, as it isn't a finite number.\r\n  count = Number(count);\r\n  if (!isFinite(count)) { return 'other' }\r\n\r\n  var preferredForm;\r\n\r\n  // Check to verify that all the requirements for Intl.PluralRules are met.\r\n  // If so, we can use that instead of our custom implementation. Otherwise,\r\n  // use the hardcoded fallback.\r\n  if (this.hasIntlPluralRulesSupport()) {\r\n    preferredForm = new Intl.PluralRules(this.locale).select(count);\r\n  } else {\r\n    preferredForm = this.selectPluralFormUsingFallbackRules(count);\r\n  }\r\n\r\n  // Use the correct plural form if provided\r\n  if (lookupKey + '.' + preferredForm in this.translations) {\r\n    return preferredForm\r\n  // Fall back to `other` if the plural form is missing, but log a warning\r\n  // to the console\r\n  } else if (lookupKey + '.other' in this.translations) {\r\n    if (console && 'warn' in console) {\r\n      console.warn('i18n: Missing plural form \".' + preferredForm + '\" for \"' +\r\n        this.locale + '\" locale. Falling back to \".other\".');\r\n    }\r\n\r\n    return 'other'\r\n  // If the required `other` plural form is missing, all we can do is error\r\n  } else {\r\n    throw new Error(\r\n      'i18n: Plural form \".other\" is required for \"' + this.locale + '\" locale'\r\n    )\r\n  }\r\n};\r\n\r\n/**\r\n * Get the plural form using our fallback implementation\r\n *\r\n * This is split out into a separate function to make it easier to test the\r\n * fallback behaviour in an environment where Intl.PluralRules exists.\r\n *\r\n * @param {number} count - Number used to determine which pluralisation to use.\r\n * @returns {PluralRule} The pluralisation form for count in this locale.\r\n */\r\nI18n.prototype.selectPluralFormUsingFallbackRules = function (count) {\r\n  // Currently our custom code can only handle positive integers, so let's\r\n  // make sure our number is one of those.\r\n  count = Math.abs(Math.floor(count));\r\n\r\n  var ruleset = this.getPluralRulesForLocale();\r\n\r\n  if (ruleset) {\r\n    return I18n.pluralRules[ruleset](count)\r\n  }\r\n\r\n  return 'other'\r\n};\r\n\r\n/**\r\n * Work out which pluralisation rules to use for the current locale\r\n *\r\n * The locale may include a regional indicator (such as en-GB), but we don't\r\n * usually care about this part, as pluralisation rules are usually the same\r\n * regardless of region. There are exceptions, however, (e.g. Portuguese) so\r\n * this searches by both the full and shortened locale codes, just to be sure.\r\n *\r\n * @returns {PluralRuleName | undefined} The name of the pluralisation rule to use (a key for one\r\n *   of the functions in this.pluralRules)\r\n */\r\nI18n.prototype.getPluralRulesForLocale = function () {\r\n  var locale = this.locale;\r\n  var localeShort = locale.split('-')[0];\r\n\r\n  // Look through the plural rules map to find which `pluralRule` is\r\n  // appropriate for our current `locale`.\r\n  for (var pluralRule in I18n.pluralRulesMap) {\r\n    if (Object.prototype.hasOwnProperty.call(I18n.pluralRulesMap, pluralRule)) {\r\n      var languages = I18n.pluralRulesMap[pluralRule];\r\n      for (var i = 0; i < languages.length; i++) {\r\n        if (languages[i] === locale || languages[i] === localeShort) {\r\n          return pluralRule\r\n        }\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Map of plural rules to languages where those rules apply.\r\n *\r\n * Note: These groups are named for the most dominant or recognisable language\r\n * that uses each system. The groupings do not imply that the languages are\r\n * related to one another. Many languages have evolved the same systems\r\n * independently of one another.\r\n *\r\n * Code to support more languages can be found in the i18n spike:\r\n * {@link https://github.com/alphagov/govuk-frontend/blob/spike-i18n-support/src/govuk/i18n.mjs}\r\n *\r\n * Languages currently supported:\r\n *\r\n * Arabic: Arabic (ar)\r\n * Chinese: Burmese (my), Chinese (zh), Indonesian (id), Japanese (ja),\r\n *   Javanese (jv), Korean (ko), Malay (ms), Thai (th), Vietnamese (vi)\r\n * French: Armenian (hy), Bangla (bn), French (fr), Gujarati (gu), Hindi (hi),\r\n *   Persian Farsi (fa), Punjabi (pa), Zulu (zu)\r\n * German: Afrikaans (af), Albanian (sq), Azerbaijani (az), Basque (eu),\r\n *   Bulgarian (bg), Catalan (ca), Danish (da), Dutch (nl), English (en),\r\n *   Estonian (et), Finnish (fi), Georgian (ka), German (de), Greek (el),\r\n *   Hungarian (hu), Luxembourgish (lb), Norwegian (no), Somali (so),\r\n *   Swahili (sw), Swedish (sv), Tamil (ta), Telugu (te), Turkish (tr),\r\n *   Urdu (ur)\r\n * Irish: Irish Gaelic (ga)\r\n * Russian: Russian (ru), Ukrainian (uk)\r\n * Scottish: Scottish Gaelic (gd)\r\n * Spanish: European Portuguese (pt-PT), Italian (it), Spanish (es)\r\n * Welsh: Welsh (cy)\r\n *\r\n * @type {Object<PluralRuleName, string[]>}\r\n */\r\nI18n.pluralRulesMap = {\r\n  arabic: ['ar'],\r\n  chinese: ['my', 'zh', 'id', 'ja', 'jv', 'ko', 'ms', 'th', 'vi'],\r\n  french: ['hy', 'bn', 'fr', 'gu', 'hi', 'fa', 'pa', 'zu'],\r\n  german: [\r\n    'af', 'sq', 'az', 'eu', 'bg', 'ca', 'da', 'nl', 'en', 'et', 'fi', 'ka',\r\n    'de', 'el', 'hu', 'lb', 'no', 'so', 'sw', 'sv', 'ta', 'te', 'tr', 'ur'\r\n  ],\r\n  irish: ['ga'],\r\n  russian: ['ru', 'uk'],\r\n  scottish: ['gd'],\r\n  spanish: ['pt-PT', 'it', 'es'],\r\n  welsh: ['cy']\r\n};\r\n\r\n/**\r\n * Different pluralisation rule sets\r\n *\r\n * Returns the appropriate suffix for the plural form associated with `n`.\r\n * Possible suffixes: 'zero', 'one', 'two', 'few', 'many', 'other' (the actual\r\n * meaning of each differs per locale). 'other' should always exist, even in\r\n * languages without plurals, such as Chinese.\r\n * {@link https://cldr.unicode.org/index/cldr-spec/plural-rules}\r\n *\r\n * The count must be a positive integer. Negative numbers and decimals aren't accounted for\r\n *\r\n * @type {Object<string, function(number): PluralRule>}\r\n */\r\nI18n.pluralRules = {\r\n  arabic: function (n) {\r\n    if (n === 0) { return 'zero' }\r\n    if (n === 1) { return 'one' }\r\n    if (n === 2) { return 'two' }\r\n    if (n % 100 >= 3 && n % 100 <= 10) { return 'few' }\r\n    if (n % 100 >= 11 && n % 100 <= 99) { return 'many' }\r\n    return 'other'\r\n  },\r\n  chinese: function () {\r\n    return 'other'\r\n  },\r\n  french: function (n) {\r\n    return n === 0 || n === 1 ? 'one' : 'other'\r\n  },\r\n  german: function (n) {\r\n    return n === 1 ? 'one' : 'other'\r\n  },\r\n  irish: function (n) {\r\n    if (n === 1) { return 'one' }\r\n    if (n === 2) { return 'two' }\r\n    if (n >= 3 && n <= 6) { return 'few' }\r\n    if (n >= 7 && n <= 10) { return 'many' }\r\n    return 'other'\r\n  },\r\n  russian: function (n) {\r\n    var lastTwo = n % 100;\r\n    var last = lastTwo % 10;\r\n    if (last === 1 && lastTwo !== 11) { return 'one' }\r\n    if (last >= 2 && last <= 4 && !(lastTwo >= 12 && lastTwo <= 14)) { return 'few' }\r\n    if (last === 0 || (last >= 5 && last <= 9) || (lastTwo >= 11 && lastTwo <= 14)) { return 'many' }\r\n    // Note: The 'other' suffix is only used by decimal numbers in Russian.\r\n    // We don't anticipate it being used, but it's here for consistency.\r\n    return 'other'\r\n  },\r\n  scottish: function (n) {\r\n    if (n === 1 || n === 11) { return 'one' }\r\n    if (n === 2 || n === 12) { return 'two' }\r\n    if ((n >= 3 && n <= 10) || (n >= 13 && n <= 19)) { return 'few' }\r\n    return 'other'\r\n  },\r\n  spanish: function (n) {\r\n    if (n === 1) { return 'one' }\r\n    if (n % 1000000 === 0 && n !== 0) { return 'many' }\r\n    return 'other'\r\n  },\r\n  welsh: function (n) {\r\n    if (n === 0) { return 'zero' }\r\n    if (n === 1) { return 'one' }\r\n    if (n === 2) { return 'two' }\r\n    if (n === 3) { return 'few' }\r\n    if (n === 6) { return 'many' }\r\n    return 'other'\r\n  }\r\n};\r\n\r\n/**\r\n * Supported languages for plural rules\r\n *\r\n * @typedef {'arabic' | 'chinese' | 'french' | 'german' | 'irish' | 'russian' | 'scottish' | 'spanish' | 'welsh'} PluralRuleName\r\n */\r\n\r\n/**\r\n * Plural rule category mnemonic tags\r\n *\r\n * @typedef {'zero' | 'one' | 'two' | 'few' | 'many' | 'other'} PluralRule\r\n */\r\n\r\n/**\r\n * Translated message by plural rule they correspond to.\r\n *\r\n * Allows to group pluralised messages under a single key when passing\r\n * translations to a component's constructor\r\n *\r\n * @typedef {object} TranslationPluralForms\r\n * @property {string} [other] - General plural form\r\n * @property {string} [zero] - Plural form used with 0\r\n * @property {string} [one] - Plural form used with 1\r\n * @property {string} [two] - Plural form used with 2\r\n * @property {string} [few] - Plural form used for a few\r\n * @property {string} [many] - Plural form used for many\r\n */\r\n\r\n/**\r\n * Translated messages (flattened)\r\n *\r\n * @private\r\n * @typedef {Object<string, string> | {}} TranslationsFlattened\r\n */\r\n\r\n(function(undefined) {\r\n\r\n// Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Object/defineProperty/detect.js\r\nvar detect = (\r\n  // In IE8, defineProperty could only act on DOM elements, so full support\r\n  // for the feature requires the ability to set a property on an arbitrary object\r\n  'defineProperty' in Object && (function() {\r\n  \ttry {\r\n  \t\tvar a = {};\r\n  \t\tObject.defineProperty(a, 'test', {value:42});\r\n  \t\treturn true;\r\n  \t} catch(e) {\r\n  \t\treturn false\r\n  \t}\r\n  }())\r\n);\r\n\r\nif (detect) return\r\n\r\n// Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Object.defineProperty&flags=always\r\n(function (nativeDefineProperty) {\r\n\r\n\tvar supportsAccessors = Object.prototype.hasOwnProperty('__defineGetter__');\r\n\tvar ERR_ACCESSORS_NOT_SUPPORTED = 'Getters & setters cannot be defined on this javascript engine';\r\n\tvar ERR_VALUE_ACCESSORS = 'A property cannot both have accessors and be writable or have a value';\r\n\r\n\tObject.defineProperty = function defineProperty(object, property, descriptor) {\r\n\r\n\t\t// Where native support exists, assume it\r\n\t\tif (nativeDefineProperty && (object === window || object === document || object === Element.prototype || object instanceof Element)) {\r\n\t\t\treturn nativeDefineProperty(object, property, descriptor);\r\n\t\t}\r\n\r\n\t\tif (object === null || !(object instanceof Object || typeof object === 'object')) {\r\n\t\t\tthrow new TypeError('Object.defineProperty called on non-object');\r\n\t\t}\r\n\r\n\t\tif (!(descriptor instanceof Object)) {\r\n\t\t\tthrow new TypeError('Property description must be an object');\r\n\t\t}\r\n\r\n\t\tvar propertyString = String(property);\r\n\t\tvar hasValueOrWritable = 'value' in descriptor || 'writable' in descriptor;\r\n\t\tvar getterType = 'get' in descriptor && typeof descriptor.get;\r\n\t\tvar setterType = 'set' in descriptor && typeof descriptor.set;\r\n\r\n\t\t// handle descriptor.get\r\n\t\tif (getterType) {\r\n\t\t\tif (getterType !== 'function') {\r\n\t\t\t\tthrow new TypeError('Getter must be a function');\r\n\t\t\t}\r\n\t\t\tif (!supportsAccessors) {\r\n\t\t\t\tthrow new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);\r\n\t\t\t}\r\n\t\t\tif (hasValueOrWritable) {\r\n\t\t\t\tthrow new TypeError(ERR_VALUE_ACCESSORS);\r\n\t\t\t}\r\n\t\t\tObject.__defineGetter__.call(object, propertyString, descriptor.get);\r\n\t\t} else {\r\n\t\t\tobject[propertyString] = descriptor.value;\r\n\t\t}\r\n\r\n\t\t// handle descriptor.set\r\n\t\tif (setterType) {\r\n\t\t\tif (setterType !== 'function') {\r\n\t\t\t\tthrow new TypeError('Setter must be a function');\r\n\t\t\t}\r\n\t\t\tif (!supportsAccessors) {\r\n\t\t\t\tthrow new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);\r\n\t\t\t}\r\n\t\t\tif (hasValueOrWritable) {\r\n\t\t\t\tthrow new TypeError(ERR_VALUE_ACCESSORS);\r\n\t\t\t}\r\n\t\t\tObject.__defineSetter__.call(object, propertyString, descriptor.set);\r\n\t\t}\r\n\r\n\t\t// OK to define value unconditionally - if a getter has been specified as well, an error would be thrown above\r\n\t\tif ('value' in descriptor) {\r\n\t\t\tobject[propertyString] = descriptor.value;\r\n\t\t}\r\n\r\n\t\treturn object;\r\n\t};\r\n}(Object.defineProperty));\r\n})\r\n.call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n(function(undefined) {\r\n  // Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Function/prototype/bind/detect.js\r\n  var detect = 'bind' in Function.prototype;\r\n\r\n  if (detect) return\r\n\r\n  // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Function.prototype.bind&flags=always\r\n  Object.defineProperty(Function.prototype, 'bind', {\r\n      value: function bind(that) { // .length is 1\r\n          // add necessary es5-shim utilities\r\n          var $Array = Array;\r\n          var $Object = Object;\r\n          var ObjectPrototype = $Object.prototype;\r\n          var ArrayPrototype = $Array.prototype;\r\n          var Empty = function Empty() {};\r\n          var to_string = ObjectPrototype.toString;\r\n          var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\r\n          var isCallable; /* inlined from https://npmjs.com/is-callable */ var fnToStr = Function.prototype.toString, tryFunctionObject = function tryFunctionObject(value) { try { fnToStr.call(value); return true; } catch (e) { return false; } }, fnClass = '[object Function]', genClass = '[object GeneratorFunction]'; isCallable = function isCallable(value) { if (typeof value !== 'function') { return false; } if (hasToStringTag) { return tryFunctionObject(value); } var strClass = to_string.call(value); return strClass === fnClass || strClass === genClass; };\r\n          var array_slice = ArrayPrototype.slice;\r\n          var array_concat = ArrayPrototype.concat;\r\n          var array_push = ArrayPrototype.push;\r\n          var max = Math.max;\r\n          // /add necessary es5-shim utilities\r\n\r\n          // 1. Let Target be the this value.\r\n          var target = this;\r\n          // 2. If IsCallable(Target) is false, throw a TypeError exception.\r\n          if (!isCallable(target)) {\r\n              throw new TypeError('Function.prototype.bind called on incompatible ' + target);\r\n          }\r\n          // 3. Let A be a new (possibly empty) internal list of all of the\r\n          //   argument values provided after thisArg (arg1, arg2 etc), in order.\r\n          // XXX slicedArgs will stand in for \"A\" if used\r\n          var args = array_slice.call(arguments, 1); // for normal call\r\n          // 4. Let F be a new native ECMAScript object.\r\n          // 11. Set the [[Prototype]] internal property of F to the standard\r\n          //   built-in Function prototype object as specified in 15.3.3.1.\r\n          // 12. Set the [[Call]] internal property of F as described in\r\n          //   15.3.4.5.1.\r\n          // 13. Set the [[Construct]] internal property of F as described in\r\n          //   15.3.4.5.2.\r\n          // 14. Set the [[HasInstance]] internal property of F as described in\r\n          //   15.3.4.5.3.\r\n          var bound;\r\n          var binder = function () {\r\n\r\n              if (this instanceof bound) {\r\n                  // 15.3.4.5.2 [[Construct]]\r\n                  // When the [[Construct]] internal method of a function object,\r\n                  // F that was created using the bind function is called with a\r\n                  // list of arguments ExtraArgs, the following steps are taken:\r\n                  // 1. Let target be the value of F's [[TargetFunction]]\r\n                  //   internal property.\r\n                  // 2. If target has no [[Construct]] internal method, a\r\n                  //   TypeError exception is thrown.\r\n                  // 3. Let boundArgs be the value of F's [[BoundArgs]] internal\r\n                  //   property.\r\n                  // 4. Let args be a new list containing the same values as the\r\n                  //   list boundArgs in the same order followed by the same\r\n                  //   values as the list ExtraArgs in the same order.\r\n                  // 5. Return the result of calling the [[Construct]] internal\r\n                  //   method of target providing args as the arguments.\r\n\r\n                  var result = target.apply(\r\n                      this,\r\n                      array_concat.call(args, array_slice.call(arguments))\r\n                  );\r\n                  if ($Object(result) === result) {\r\n                      return result;\r\n                  }\r\n                  return this;\r\n\r\n              } else {\r\n                  // 15.3.4.5.1 [[Call]]\r\n                  // When the [[Call]] internal method of a function object, F,\r\n                  // which was created using the bind function is called with a\r\n                  // this value and a list of arguments ExtraArgs, the following\r\n                  // steps are taken:\r\n                  // 1. Let boundArgs be the value of F's [[BoundArgs]] internal\r\n                  //   property.\r\n                  // 2. Let boundThis be the value of F's [[BoundThis]] internal\r\n                  //   property.\r\n                  // 3. Let target be the value of F's [[TargetFunction]] internal\r\n                  //   property.\r\n                  // 4. Let args be a new list containing the same values as the\r\n                  //   list boundArgs in the same order followed by the same\r\n                  //   values as the list ExtraArgs in the same order.\r\n                  // 5. Return the result of calling the [[Call]] internal method\r\n                  //   of target providing boundThis as the this value and\r\n                  //   providing args as the arguments.\r\n\r\n                  // equiv: target.call(this, ...boundArgs, ...args)\r\n                  return target.apply(\r\n                      that,\r\n                      array_concat.call(args, array_slice.call(arguments))\r\n                  );\r\n\r\n              }\r\n\r\n          };\r\n\r\n          // 15. If the [[Class]] internal property of Target is \"Function\", then\r\n          //     a. Let L be the length property of Target minus the length of A.\r\n          //     b. Set the length own property of F to either 0 or L, whichever is\r\n          //       larger.\r\n          // 16. Else set the length own property of F to 0.\r\n\r\n          var boundLength = max(0, target.length - args.length);\r\n\r\n          // 17. Set the attributes of the length own property of F to the values\r\n          //   specified in 15.3.5.1.\r\n          var boundArgs = [];\r\n          for (var i = 0; i < boundLength; i++) {\r\n              array_push.call(boundArgs, '$' + i);\r\n          }\r\n\r\n          // XXX Build a dynamic function with desired amount of arguments is the only\r\n          // way to set the length property of a function.\r\n          // In environments where Content Security Policies enabled (Chrome extensions,\r\n          // for ex.) all use of eval or Function costructor throws an exception.\r\n          // However in all of these environments Function.prototype.bind exists\r\n          // and so this code will never be executed.\r\n          bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);\r\n\r\n          if (target.prototype) {\r\n              Empty.prototype = target.prototype;\r\n              bound.prototype = new Empty();\r\n              // Clean up dangling references.\r\n              Empty.prototype = null;\r\n          }\r\n\r\n          // TODO\r\n          // 18. Set the [[Extensible]] internal property of F to true.\r\n\r\n          // TODO\r\n          // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).\r\n          // 20. Call the [[DefineOwnProperty]] internal method of F with\r\n          //   arguments \"caller\", PropertyDescriptor {[[Get]]: thrower, [[Set]]:\r\n          //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and\r\n          //   false.\r\n          // 21. Call the [[DefineOwnProperty]] internal method of F with\r\n          //   arguments \"arguments\", PropertyDescriptor {[[Get]]: thrower,\r\n          //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},\r\n          //   and false.\r\n\r\n          // TODO\r\n          // NOTE Function objects created using Function.prototype.bind do not\r\n          // have a prototype property or the [[Code]], [[FormalParameters]], and\r\n          // [[Scope]] internal properties.\r\n          // XXX can't delete prototype in pure-js.\r\n\r\n          // 22. Return F.\r\n          return bound;\r\n      }\r\n  });\r\n})\r\n.call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n(function(undefined) {\r\n\r\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-service/master/packages/polyfill-library/polyfills/DOMTokenList/detect.js\r\n    var detect = (\r\n      'DOMTokenList' in this && (function (x) {\r\n        return 'classList' in x ? !x.classList.toggle('x', false) && !x.className : true;\r\n      })(document.createElement('x'))\r\n    );\r\n\r\n    if (detect) return\r\n\r\n    // Polyfill from https://raw.githubusercontent.com/Financial-Times/polyfill-service/master/packages/polyfill-library/polyfills/DOMTokenList/polyfill.js\r\n    (function (global) {\r\n      var nativeImpl = \"DOMTokenList\" in global && global.DOMTokenList;\r\n\r\n      if (\r\n          !nativeImpl ||\r\n          (\r\n            !!document.createElementNS &&\r\n            !!document.createElementNS('http://www.w3.org/2000/svg', 'svg') &&\r\n            !(document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\").classList instanceof DOMTokenList)\r\n          )\r\n        ) {\r\n        global.DOMTokenList = (function() { // eslint-disable-line no-unused-vars\r\n          var dpSupport = true;\r\n          var defineGetter = function (object, name, fn, configurable) {\r\n            if (Object.defineProperty)\r\n              Object.defineProperty(object, name, {\r\n                configurable: false === dpSupport ? true : !!configurable,\r\n                get: fn\r\n              });\r\n\r\n            else object.__defineGetter__(name, fn);\r\n          };\r\n\r\n          /** Ensure the browser allows Object.defineProperty to be used on native JavaScript objects. */\r\n          try {\r\n            defineGetter({}, \"support\");\r\n          }\r\n          catch (e) {\r\n            dpSupport = false;\r\n          }\r\n\r\n\r\n          var _DOMTokenList = function (el, prop) {\r\n            var that = this;\r\n            var tokens = [];\r\n            var tokenMap = {};\r\n            var length = 0;\r\n            var maxLength = 0;\r\n            var addIndexGetter = function (i) {\r\n              defineGetter(that, i, function () {\r\n                preop();\r\n                return tokens[i];\r\n              }, false);\r\n\r\n            };\r\n            var reindex = function () {\r\n\r\n              /** Define getter functions for array-like access to the tokenList's contents. */\r\n              if (length >= maxLength)\r\n                for (; maxLength < length; ++maxLength) {\r\n                  addIndexGetter(maxLength);\r\n                }\r\n            };\r\n\r\n            /** Helper function called at the start of each class method. Internal use only. */\r\n            var preop = function () {\r\n              var error;\r\n              var i;\r\n              var args = arguments;\r\n              var rSpace = /\\s+/;\r\n\r\n              /** Validate the token/s passed to an instance method, if any. */\r\n              if (args.length)\r\n                for (i = 0; i < args.length; ++i)\r\n                  if (rSpace.test(args[i])) {\r\n                    error = new SyntaxError('String \"' + args[i] + '\" ' + \"contains\" + ' an invalid character');\r\n                    error.code = 5;\r\n                    error.name = \"InvalidCharacterError\";\r\n                    throw error;\r\n                  }\r\n\r\n\r\n              /** Split the new value apart by whitespace*/\r\n              if (typeof el[prop] === \"object\") {\r\n                tokens = (\"\" + el[prop].baseVal).replace(/^\\s+|\\s+$/g, \"\").split(rSpace);\r\n              } else {\r\n                tokens = (\"\" + el[prop]).replace(/^\\s+|\\s+$/g, \"\").split(rSpace);\r\n              }\r\n\r\n              /** Avoid treating blank strings as single-item token lists */\r\n              if (\"\" === tokens[0]) tokens = [];\r\n\r\n              /** Repopulate the internal token lists */\r\n              tokenMap = {};\r\n              for (i = 0; i < tokens.length; ++i)\r\n                tokenMap[tokens[i]] = true;\r\n              length = tokens.length;\r\n              reindex();\r\n            };\r\n\r\n            /** Populate our internal token list if the targeted attribute of the subject element isn't empty. */\r\n            preop();\r\n\r\n            /** Return the number of tokens in the underlying string. Read-only. */\r\n            defineGetter(that, \"length\", function () {\r\n              preop();\r\n              return length;\r\n            });\r\n\r\n            /** Override the default toString/toLocaleString methods to return a space-delimited list of tokens when typecast. */\r\n            that.toLocaleString =\r\n              that.toString = function () {\r\n                preop();\r\n                return tokens.join(\" \");\r\n              };\r\n\r\n            that.item = function (idx) {\r\n              preop();\r\n              return tokens[idx];\r\n            };\r\n\r\n            that.contains = function (token) {\r\n              preop();\r\n              return !!tokenMap[token];\r\n            };\r\n\r\n            that.add = function () {\r\n              preop.apply(that, args = arguments);\r\n\r\n              for (var args, token, i = 0, l = args.length; i < l; ++i) {\r\n                token = args[i];\r\n                if (!tokenMap[token]) {\r\n                  tokens.push(token);\r\n                  tokenMap[token] = true;\r\n                }\r\n              }\r\n\r\n              /** Update the targeted attribute of the attached element if the token list's changed. */\r\n              if (length !== tokens.length) {\r\n                length = tokens.length >>> 0;\r\n                if (typeof el[prop] === \"object\") {\r\n                  el[prop].baseVal = tokens.join(\" \");\r\n                } else {\r\n                  el[prop] = tokens.join(\" \");\r\n                }\r\n                reindex();\r\n              }\r\n            };\r\n\r\n            that.remove = function () {\r\n              preop.apply(that, args = arguments);\r\n\r\n              /** Build a hash of token names to compare against when recollecting our token list. */\r\n              for (var args, ignore = {}, i = 0, t = []; i < args.length; ++i) {\r\n                ignore[args[i]] = true;\r\n                delete tokenMap[args[i]];\r\n              }\r\n\r\n              /** Run through our tokens list and reassign only those that aren't defined in the hash declared above. */\r\n              for (i = 0; i < tokens.length; ++i)\r\n                if (!ignore[tokens[i]]) t.push(tokens[i]);\r\n\r\n              tokens = t;\r\n              length = t.length >>> 0;\r\n\r\n              /** Update the targeted attribute of the attached element. */\r\n              if (typeof el[prop] === \"object\") {\r\n                el[prop].baseVal = tokens.join(\" \");\r\n              } else {\r\n                el[prop] = tokens.join(\" \");\r\n              }\r\n              reindex();\r\n            };\r\n\r\n            that.toggle = function (token, force) {\r\n              preop.apply(that, [token]);\r\n\r\n              /** Token state's being forced. */\r\n              if (undefined !== force) {\r\n                if (force) {\r\n                  that.add(token);\r\n                  return true;\r\n                } else {\r\n                  that.remove(token);\r\n                  return false;\r\n                }\r\n              }\r\n\r\n              /** Token already exists in tokenList. Remove it, and return FALSE. */\r\n              if (tokenMap[token]) {\r\n                that.remove(token);\r\n                return false;\r\n              }\r\n\r\n              /** Otherwise, add the token and return TRUE. */\r\n              that.add(token);\r\n              return true;\r\n            };\r\n\r\n            return that;\r\n          };\r\n\r\n          return _DOMTokenList;\r\n        }());\r\n      }\r\n\r\n      // Add second argument to native DOMTokenList.toggle() if necessary\r\n      (function () {\r\n        var e = document.createElement('span');\r\n        if (!('classList' in e)) return;\r\n        e.classList.toggle('x', false);\r\n        if (!e.classList.contains('x')) return;\r\n        e.classList.constructor.prototype.toggle = function toggle(token /*, force*/) {\r\n          var force = arguments[1];\r\n          if (force === undefined) {\r\n            var add = !this.contains(token);\r\n            this[add ? 'add' : 'remove'](token);\r\n            return add;\r\n          }\r\n          force = !!force;\r\n          this[force ? 'add' : 'remove'](token);\r\n          return force;\r\n        };\r\n      }());\r\n\r\n      // Add multiple arguments to native DOMTokenList.add() if necessary\r\n      (function () {\r\n        var e = document.createElement('span');\r\n        if (!('classList' in e)) return;\r\n        e.classList.add('a', 'b');\r\n        if (e.classList.contains('b')) return;\r\n        var native = e.classList.constructor.prototype.add;\r\n        e.classList.constructor.prototype.add = function () {\r\n          var args = arguments;\r\n          var l = arguments.length;\r\n          for (var i = 0; i < l; i++) {\r\n            native.call(this, args[i]);\r\n          }\r\n        };\r\n      }());\r\n\r\n      // Add multiple arguments to native DOMTokenList.remove() if necessary\r\n      (function () {\r\n        var e = document.createElement('span');\r\n        if (!('classList' in e)) return;\r\n        e.classList.add('a');\r\n        e.classList.add('b');\r\n        e.classList.remove('a', 'b');\r\n        if (!e.classList.contains('b')) return;\r\n        var native = e.classList.constructor.prototype.remove;\r\n        e.classList.constructor.prototype.remove = function () {\r\n          var args = arguments;\r\n          var l = arguments.length;\r\n          for (var i = 0; i < l; i++) {\r\n            native.call(this, args[i]);\r\n          }\r\n        };\r\n      }());\r\n\r\n    }(this));\r\n\r\n}).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n(function(undefined) {\r\n\r\n// Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Document/detect.js\r\nvar detect = (\"Document\" in this);\r\n\r\nif (detect) return\r\n\r\n// Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Document&flags=always\r\nif ((typeof WorkerGlobalScope === \"undefined\") && (typeof importScripts !== \"function\")) {\r\n\r\n\tif (this.HTMLDocument) { // IE8\r\n\r\n\t\t// HTMLDocument is an extension of Document.  If the browser has HTMLDocument but not Document, the former will suffice as an alias for the latter.\r\n\t\tthis.Document = this.HTMLDocument;\r\n\r\n\t} else {\r\n\r\n\t\t// Create an empty function to act as the missing constructor for the document object, attach the document object as its prototype.  The function needs to be anonymous else it is hoisted and causes the feature detect to prematurely pass, preventing the assignments below being made.\r\n\t\tthis.Document = this.HTMLDocument = document.constructor = (new Function('return function Document() {}')());\r\n\t\tthis.Document.prototype = document;\r\n\t}\r\n}\r\n\r\n\r\n})\r\n.call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n(function(undefined) {\r\n\r\n// Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Element/detect.js\r\nvar detect = ('Element' in this && 'HTMLElement' in this);\r\n\r\nif (detect) return\r\n\r\n// Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Element&flags=always\r\n(function () {\r\n\r\n\t// IE8\r\n\tif (window.Element && !window.HTMLElement) {\r\n\t\twindow.HTMLElement = window.Element;\r\n\t\treturn;\r\n\t}\r\n\r\n\t// create Element constructor\r\n\twindow.Element = window.HTMLElement = new Function('return function Element() {}')();\r\n\r\n\t// generate sandboxed iframe\r\n\tvar vbody = document.appendChild(document.createElement('body'));\r\n\tvar frame = vbody.appendChild(document.createElement('iframe'));\r\n\r\n\t// use sandboxed iframe to replicate Element functionality\r\n\tvar frameDocument = frame.contentWindow.document;\r\n\tvar prototype = Element.prototype = frameDocument.appendChild(frameDocument.createElement('*'));\r\n\tvar cache = {};\r\n\r\n\t// polyfill Element.prototype on an element\r\n\tvar shiv = function (element, deep) {\r\n\t\tvar\r\n\t\tchildNodes = element.childNodes || [],\r\n\t\tindex = -1,\r\n\t\tkey, value, childNode;\r\n\r\n\t\tif (element.nodeType === 1 && element.constructor !== Element) {\r\n\t\t\telement.constructor = Element;\r\n\r\n\t\t\tfor (key in cache) {\r\n\t\t\t\tvalue = cache[key];\r\n\t\t\t\telement[key] = value;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twhile (childNode = deep && childNodes[++index]) {\r\n\t\t\tshiv(childNode, deep);\r\n\t\t}\r\n\r\n\t\treturn element;\r\n\t};\r\n\r\n\tvar elements = document.getElementsByTagName('*');\r\n\tvar nativeCreateElement = document.createElement;\r\n\tvar interval;\r\n\tvar loopLimit = 100;\r\n\r\n\tprototype.attachEvent('onpropertychange', function (event) {\r\n\t\tvar\r\n\t\tpropertyName = event.propertyName,\r\n\t\tnonValue = !cache.hasOwnProperty(propertyName),\r\n\t\tnewValue = prototype[propertyName],\r\n\t\toldValue = cache[propertyName],\r\n\t\tindex = -1,\r\n\t\telement;\r\n\r\n\t\twhile (element = elements[++index]) {\r\n\t\t\tif (element.nodeType === 1) {\r\n\t\t\t\tif (nonValue || element[propertyName] === oldValue) {\r\n\t\t\t\t\telement[propertyName] = newValue;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tcache[propertyName] = newValue;\r\n\t});\r\n\r\n\tprototype.constructor = Element;\r\n\r\n\tif (!prototype.hasAttribute) {\r\n\t\t// <Element>.hasAttribute\r\n\t\tprototype.hasAttribute = function hasAttribute(name) {\r\n\t\t\treturn this.getAttribute(name) !== null;\r\n\t\t};\r\n\t}\r\n\r\n\t// Apply Element prototype to the pre-existing DOM as soon as the body element appears.\r\n\tfunction bodyCheck() {\r\n\t\tif (!(loopLimit--)) clearTimeout(interval);\r\n\t\tif (document.body && !document.body.prototype && /(complete|interactive)/.test(document.readyState)) {\r\n\t\t\tshiv(document, true);\r\n\t\t\tif (interval && document.body.prototype) clearTimeout(interval);\r\n\t\t\treturn (!!document.body.prototype);\r\n\t\t}\r\n\t\treturn false;\r\n\t}\r\n\tif (!bodyCheck()) {\r\n\t\tdocument.onreadystatechange = bodyCheck;\r\n\t\tinterval = setInterval(bodyCheck, 25);\r\n\t}\r\n\r\n\t// Apply to any new elements created after load\r\n\tdocument.createElement = function createElement(nodeName) {\r\n\t\tvar element = nativeCreateElement(String(nodeName).toLowerCase());\r\n\t\treturn shiv(element);\r\n\t};\r\n\r\n\t// remove sandboxed iframe\r\n\tdocument.removeChild(vbody);\r\n}());\r\n\r\n})\r\n.call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n(function(undefined) {\r\n\r\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-service/8717a9e04ac7aff99b4980fbedead98036b0929a/packages/polyfill-library/polyfills/Element/prototype/classList/detect.js\r\n    var detect = (\r\n      'document' in this && \"classList\" in document.documentElement && 'Element' in this && 'classList' in Element.prototype && (function () {\r\n        var e = document.createElement('span');\r\n        e.classList.add('a', 'b');\r\n        return e.classList.contains('b');\r\n      }())\r\n    );\r\n\r\n    if (detect) return\r\n\r\n    // Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Element.prototype.classList&flags=always\r\n    (function (global) {\r\n      var dpSupport = true;\r\n      var defineGetter = function (object, name, fn, configurable) {\r\n        if (Object.defineProperty)\r\n          Object.defineProperty(object, name, {\r\n            configurable: false === dpSupport ? true : !!configurable,\r\n            get: fn\r\n          });\r\n\r\n        else object.__defineGetter__(name, fn);\r\n      };\r\n      /** Ensure the browser allows Object.defineProperty to be used on native JavaScript objects. */\r\n      try {\r\n        defineGetter({}, \"support\");\r\n      }\r\n      catch (e) {\r\n        dpSupport = false;\r\n      }\r\n      /** Polyfills a property with a DOMTokenList */\r\n      var addProp = function (o, name, attr) {\r\n\r\n        defineGetter(o.prototype, name, function () {\r\n          var tokenList;\r\n\r\n          var THIS = this,\r\n\r\n          /** Prevent this from firing twice for some reason. What the hell, IE. */\r\n          gibberishProperty = \"__defineGetter__\" + \"DEFINE_PROPERTY\" + name;\r\n          if(THIS[gibberishProperty]) return tokenList;\r\n          THIS[gibberishProperty] = true;\r\n\r\n          /**\r\n           * IE8 can't define properties on native JavaScript objects, so we'll use a dumb hack instead.\r\n           *\r\n           * What this is doing is creating a dummy element (\"reflection\") inside a detached phantom node (\"mirror\")\r\n           * that serves as the target of Object.defineProperty instead. While we could simply use the subject HTML\r\n           * element instead, this would conflict with element types which use indexed properties (such as forms and\r\n           * select lists).\r\n           */\r\n          if (false === dpSupport) {\r\n\r\n            var visage;\r\n            var mirror = addProp.mirror || document.createElement(\"div\");\r\n            var reflections = mirror.childNodes;\r\n            var l = reflections.length;\r\n\r\n            for (var i = 0; i < l; ++i)\r\n              if (reflections[i]._R === THIS) {\r\n                visage = reflections[i];\r\n                break;\r\n              }\r\n\r\n            /** Couldn't find an element's reflection inside the mirror. Materialise one. */\r\n            visage || (visage = mirror.appendChild(document.createElement(\"div\")));\r\n\r\n            tokenList = DOMTokenList.call(visage, THIS, attr);\r\n          } else tokenList = new DOMTokenList(THIS, attr);\r\n\r\n          defineGetter(THIS, name, function () {\r\n            return tokenList;\r\n          });\r\n          delete THIS[gibberishProperty];\r\n\r\n          return tokenList;\r\n        }, true);\r\n      };\r\n\r\n      addProp(global.Element, \"classList\", \"className\");\r\n      addProp(global.HTMLElement, \"classList\", \"className\");\r\n      addProp(global.HTMLLinkElement, \"relList\", \"rel\");\r\n      addProp(global.HTMLAnchorElement, \"relList\", \"rel\");\r\n      addProp(global.HTMLAreaElement, \"relList\", \"rel\");\r\n    }(this));\r\n\r\n}).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n(function(undefined) {\r\n\r\n    // Detection from https://github.com/mdn/content/blob/cf607d68522cd35ee7670782d3ee3a361eaef2e4/files/en-us/web/javascript/reference/global_objects/string/trim/index.md#polyfill\r\n    var detect = ('trim' in String.prototype);\r\n    \r\n    if (detect) return\r\n\r\n    // Polyfill from https://github.com/mdn/content/blob/cf607d68522cd35ee7670782d3ee3a361eaef2e4/files/en-us/web/javascript/reference/global_objects/string/trim/index.md#polyfill\r\n    String.prototype.trim = function () {\r\n        return this.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '');\r\n    };\r\n\r\n}).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n(function(undefined) {\r\n\r\n  // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-library/13cf7c340974d128d557580b5e2dafcd1b1192d1/polyfills/Element/prototype/dataset/detect.js\r\n  var detect = (function(){\r\n    if (!document.documentElement.dataset) {\r\n      return false;\r\n    }\r\n    var el = document.createElement('div');\r\n    el.setAttribute(\"data-a-b\", \"c\");\r\n    return el.dataset && el.dataset.aB == \"c\";\r\n  }());\r\n\r\n  if (detect) return\r\n\r\n  // Polyfill derived from  https://raw.githubusercontent.com/Financial-Times/polyfill-library/13cf7c340974d128d557580b5e2dafcd1b1192d1/polyfills/Element/prototype/dataset/polyfill.js\r\n  Object.defineProperty(Element.prototype, 'dataset', {\r\n    get: function() {\r\n      var element = this;\r\n      var attributes = this.attributes;\r\n      var map = {};\r\n  \r\n      for (var i = 0; i < attributes.length; i++) {\r\n        var attribute = attributes[i];\r\n  \r\n        // This regex has been edited from the original polyfill, to add\r\n        // support for period (.) separators in data-* attribute names. These\r\n        // are allowed in the HTML spec, but were not covered by the original\r\n        // polyfill's regex. We use periods in our i18n implementation.\r\n        if (attribute && attribute.name && (/^data-\\w[.\\w-]*$/).test(attribute.name)) {\r\n          var name = attribute.name;\r\n          var value = attribute.value;\r\n  \r\n          var propName = name.substr(5).replace(/-./g, function (prop) {\r\n            return prop.charAt(1).toUpperCase();\r\n          });\r\n          \r\n          // If this browser supports __defineGetter__ and __defineSetter__,\r\n          // continue using defineProperty. If not (like IE 8 and below), we use\r\n          // a hacky fallback which at least gives an object in the right format\r\n          if ('__defineGetter__' in Object.prototype && '__defineSetter__' in Object.prototype) {\r\n            Object.defineProperty(map, propName, {\r\n              enumerable: true,\r\n              get: function() {\r\n                return this.value;\r\n              }.bind({value: value || ''}),\r\n              set: function setter(name, value) {\r\n                if (typeof value !== 'undefined') {\r\n                  this.setAttribute(name, value);\r\n                } else {\r\n                  this.removeAttribute(name);\r\n                }\r\n              }.bind(element, name)\r\n            });\r\n          } else {\r\n            map[propName] = value;\r\n          }\r\n\r\n        }\r\n      }\r\n  \r\n      return map;\r\n    }\r\n  });\r\n\r\n}).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n/**\r\n * Normalise string\r\n *\r\n * 'If it looks like a duck, and it quacks like a duck…' 🦆\r\n *\r\n * If the passed value looks like a boolean or a number, convert it to a boolean\r\n * or number.\r\n *\r\n * Designed to be used to convert config passed via data attributes (which are\r\n * always strings) into something sensible.\r\n *\r\n * @param {string} value - The value to normalise\r\n * @returns {string | boolean | number | undefined} Normalised data\r\n */\r\nfunction normaliseString (value) {\r\n  if (typeof value !== 'string') {\r\n    return value\r\n  }\r\n\r\n  var trimmedValue = value.trim();\r\n\r\n  if (trimmedValue === 'true') {\r\n    return true\r\n  }\r\n\r\n  if (trimmedValue === 'false') {\r\n    return false\r\n  }\r\n\r\n  // Empty / whitespace-only strings are considered finite so we need to check\r\n  // the length of the trimmed string as well\r\n  if (trimmedValue.length > 0 && isFinite(trimmedValue)) {\r\n    return Number(trimmedValue)\r\n  }\r\n\r\n  return value\r\n}\r\n\r\n/**\r\n * Normalise dataset\r\n *\r\n * Loop over an object and normalise each value using normaliseData function\r\n *\r\n * @param {DOMStringMap} dataset - HTML element dataset\r\n * @returns {Object<string, string | boolean | number | undefined>} Normalised dataset\r\n */\r\nfunction normaliseDataset (dataset) {\r\n  var out = {};\r\n\r\n  for (var key in dataset) {\r\n    out[key] = normaliseString(dataset[key]);\r\n  }\r\n\r\n  return out\r\n}\r\n\r\n/**\r\n * @constant\r\n * @type {AccordionTranslations}\r\n * @see Default value for {@link AccordionConfig.i18n}\r\n * @default\r\n */\r\nvar ACCORDION_TRANSLATIONS = {\r\n  hideAllSections: 'Hide all sections',\r\n  hideSection: 'Hide',\r\n  hideSectionAriaLabel: 'Hide this section',\r\n  showAllSections: 'Show all sections',\r\n  showSection: 'Show',\r\n  showSectionAriaLabel: 'Show this section'\r\n};\r\n\r\n/**\r\n * Accordion component\r\n *\r\n * This allows a collection of sections to be collapsed by default, showing only\r\n * their headers. Sections can be expanded or collapsed individually by clicking\r\n * their headers. A \"Show all sections\" button is also added to the top of the\r\n * accordion, which switches to \"Hide all sections\" when all the sections are\r\n * expanded.\r\n *\r\n * The state of each section is saved to the DOM via the `aria-expanded`\r\n * attribute, which also provides accessibility.\r\n *\r\n * @class\r\n * @param {HTMLElement} $module - HTML element to use for accordion\r\n * @param {AccordionConfig} [config] - Accordion config\r\n */\r\nfunction Accordion ($module, config) {\r\n  this.$module = $module;\r\n  this.$sections = $module.querySelectorAll('.govuk-accordion__section');\r\n  this.browserSupportsSessionStorage = helper.checkForSessionStorage();\r\n\r\n  var defaultConfig = {\r\n    i18n: ACCORDION_TRANSLATIONS\r\n  };\r\n  this.config = mergeConfigs(\r\n    defaultConfig,\r\n    config || {},\r\n    normaliseDataset($module.dataset)\r\n  );\r\n  this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'));\r\n\r\n  this.controlsClass = 'govuk-accordion__controls';\r\n  this.showAllClass = 'govuk-accordion__show-all';\r\n  this.showAllTextClass = 'govuk-accordion__show-all-text';\r\n\r\n  this.sectionExpandedClass = 'govuk-accordion__section--expanded';\r\n  this.sectionButtonClass = 'govuk-accordion__section-button';\r\n  this.sectionHeaderClass = 'govuk-accordion__section-header';\r\n  this.sectionHeadingClass = 'govuk-accordion__section-heading';\r\n  this.sectionHeadingTextClass = 'govuk-accordion__section-heading-text';\r\n  this.sectionHeadingTextFocusClass = 'govuk-accordion__section-heading-text-focus';\r\n\r\n  this.sectionShowHideToggleClass = 'govuk-accordion__section-toggle';\r\n  this.sectionShowHideToggleFocusClass = 'govuk-accordion__section-toggle-focus';\r\n  this.sectionShowHideTextClass = 'govuk-accordion__section-toggle-text';\r\n  this.upChevronIconClass = 'govuk-accordion-nav__chevron';\r\n  this.downChevronIconClass = 'govuk-accordion-nav__chevron--down';\r\n\r\n  this.sectionSummaryClass = 'govuk-accordion__section-summary';\r\n  this.sectionSummaryFocusClass = 'govuk-accordion__section-summary-focus';\r\n}\r\n\r\n// Initialize component\r\nAccordion.prototype.init = function () {\r\n  // Check for module\r\n  if (!this.$module) {\r\n    return\r\n  }\r\n\r\n  this.initControls();\r\n  this.initSectionHeaders();\r\n\r\n  // See if \"Show all sections\" button text should be updated\r\n  var areAllSectionsOpen = this.checkIfAllSectionsOpen();\r\n  this.updateShowAllButton(areAllSectionsOpen);\r\n};\r\n\r\n// Initialise controls and set attributes\r\nAccordion.prototype.initControls = function () {\r\n  // Create \"Show all\" button and set attributes\r\n  this.$showAllButton = document.createElement('button');\r\n  this.$showAllButton.setAttribute('type', 'button');\r\n  this.$showAllButton.setAttribute('class', this.showAllClass);\r\n  this.$showAllButton.setAttribute('aria-expanded', 'false');\r\n\r\n  // Create icon, add to element\r\n  var $icon = document.createElement('span');\r\n  $icon.classList.add(this.upChevronIconClass);\r\n  this.$showAllButton.appendChild($icon);\r\n\r\n  // Create control wrapper and add controls to it\r\n  var $accordionControls = document.createElement('div');\r\n  $accordionControls.setAttribute('class', this.controlsClass);\r\n  $accordionControls.appendChild(this.$showAllButton);\r\n  this.$module.insertBefore($accordionControls, this.$module.firstChild);\r\n\r\n  // Build additional wrapper for Show all toggle text and place after icon\r\n  var $wrappershowAllText = document.createElement('span');\r\n  $wrappershowAllText.classList.add(this.showAllTextClass);\r\n  this.$showAllButton.appendChild($wrappershowAllText);\r\n\r\n  // Handle click events on the show/hide all button\r\n  this.$showAllButton.addEventListener('click', this.onShowOrHideAllToggle.bind(this));\r\n};\r\n\r\n// Initialise section headers\r\nAccordion.prototype.initSectionHeaders = function () {\r\n  // Loop through section headers\r\n  nodeListForEach(this.$sections, function ($section, i) {\r\n    // Set header attributes\r\n    var $header = $section.querySelector('.' + this.sectionHeaderClass);\r\n    this.constructHeaderMarkup($header, i);\r\n    this.setExpanded(this.isExpanded($section), $section);\r\n\r\n    // Handle events\r\n    $header.addEventListener('click', this.onSectionToggle.bind(this, $section));\r\n\r\n    // See if there is any state stored in sessionStorage and set the sections to\r\n    // open or closed.\r\n    this.setInitialState($section);\r\n  }.bind(this));\r\n};\r\n\r\nAccordion.prototype.constructHeaderMarkup = function ($headerWrapper, index) {\r\n  var $span = $headerWrapper.querySelector('.' + this.sectionButtonClass);\r\n  var $heading = $headerWrapper.querySelector('.' + this.sectionHeadingClass);\r\n  var $summary = $headerWrapper.querySelector('.' + this.sectionSummaryClass);\r\n\r\n  // Create a button element that will replace the '.govuk-accordion__section-button' span\r\n  var $button = document.createElement('button');\r\n  $button.setAttribute('type', 'button');\r\n  $button.setAttribute('aria-controls', this.$module.id + '-content-' + (index + 1));\r\n\r\n  // Copy all attributes (https://developer.mozilla.org/en-US/docs/Web/API/Element/attributes) from $span to $button\r\n  for (var i = 0; i < $span.attributes.length; i++) {\r\n    var attr = $span.attributes.item(i);\r\n    // Add all attributes but not ID as this is being added to\r\n    // the section heading ($headingText)\r\n    if (attr.nodeName !== 'id') {\r\n      $button.setAttribute(attr.nodeName, attr.nodeValue);\r\n    }\r\n  }\r\n\r\n  // Create container for heading text so it can be styled\r\n  var $headingText = document.createElement('span');\r\n  $headingText.classList.add(this.sectionHeadingTextClass);\r\n  // Copy the span ID to the heading text to allow it to be referenced by `aria-labelledby` on the\r\n  // hidden content area without \"Show this section\"\r\n  $headingText.id = $span.id;\r\n\r\n  // Create an inner heading text container to limit the width of the focus state\r\n  var $headingTextFocus = document.createElement('span');\r\n  $headingTextFocus.classList.add(this.sectionHeadingTextFocusClass);\r\n  $headingText.appendChild($headingTextFocus);\r\n  // span could contain HTML elements (see https://www.w3.org/TR/2011/WD-html5-20110525/content-models.html#phrasing-content)\r\n  $headingTextFocus.innerHTML = $span.innerHTML;\r\n\r\n  // Create container for show / hide icons and text.\r\n  var $showToggle = document.createElement('span');\r\n  $showToggle.classList.add(this.sectionShowHideToggleClass);\r\n  // Tell Google not to index the 'show' text as part of the heading\r\n  // For the snippet to work with JavaScript, it must be added before adding the page element to the\r\n  // page's DOM. See https://developers.google.com/search/docs/advanced/robots/robots_meta_tag#data-nosnippet-attr\r\n  $showToggle.setAttribute('data-nosnippet', '');\r\n  // Create an inner container to limit the width of the focus state\r\n  var $showToggleFocus = document.createElement('span');\r\n  $showToggleFocus.classList.add(this.sectionShowHideToggleFocusClass);\r\n  $showToggle.appendChild($showToggleFocus);\r\n  // Create wrapper for the show / hide text. Append text after the show/hide icon\r\n  var $showToggleText = document.createElement('span');\r\n  var $icon = document.createElement('span');\r\n  $icon.classList.add(this.upChevronIconClass);\r\n  $showToggleFocus.appendChild($icon);\r\n  $showToggleText.classList.add(this.sectionShowHideTextClass);\r\n  $showToggleFocus.appendChild($showToggleText);\r\n\r\n  // Append elements to the button:\r\n  // 1. Heading text\r\n  // 2. Punctuation\r\n  // 3. (Optional: Summary line followed by punctuation)\r\n  // 4. Show / hide toggle\r\n  $button.appendChild($headingText);\r\n  $button.appendChild(this.getButtonPunctuationEl());\r\n\r\n  // If summary content exists add to DOM in correct order\r\n  if (typeof ($summary) !== 'undefined' && $summary !== null) {\r\n    // Create a new `span` element and copy the summary line content from the original `div` to the\r\n    // new `span`\r\n    // This is because the summary line text is now inside a button element, which can only contain\r\n    // phrasing content\r\n    var $summarySpan = document.createElement('span');\r\n    // Create an inner summary container to limit the width of the summary focus state\r\n    var $summarySpanFocus = document.createElement('span');\r\n    $summarySpanFocus.classList.add(this.sectionSummaryFocusClass);\r\n    $summarySpan.appendChild($summarySpanFocus);\r\n\r\n    // Get original attributes, and pass them to the replacement\r\n    for (var j = 0, l = $summary.attributes.length; j < l; ++j) {\r\n      var nodeName = $summary.attributes.item(j).nodeName;\r\n      var nodeValue = $summary.attributes.item(j).nodeValue;\r\n      $summarySpan.setAttribute(nodeName, nodeValue);\r\n    }\r\n\r\n    // Copy original contents of summary to the new summary span\r\n    $summarySpanFocus.innerHTML = $summary.innerHTML;\r\n\r\n    // Replace the original summary `div` with the new summary `span`\r\n    $summary.parentNode.replaceChild($summarySpan, $summary);\r\n\r\n    $button.appendChild($summarySpan);\r\n    $button.appendChild(this.getButtonPunctuationEl());\r\n  }\r\n\r\n  $button.appendChild($showToggle);\r\n\r\n  $heading.removeChild($span);\r\n  $heading.appendChild($button);\r\n};\r\n\r\n// When section toggled, set and store state\r\nAccordion.prototype.onSectionToggle = function ($section) {\r\n  var expanded = this.isExpanded($section);\r\n  this.setExpanded(!expanded, $section);\r\n\r\n  // Store the state in sessionStorage when a change is triggered\r\n  this.storeState($section);\r\n};\r\n\r\n// When Open/Close All toggled, set and store state\r\nAccordion.prototype.onShowOrHideAllToggle = function () {\r\n  var $module = this;\r\n  var $sections = this.$sections;\r\n  var nowExpanded = !this.checkIfAllSectionsOpen();\r\n\r\n  nodeListForEach($sections, function ($section) {\r\n    $module.setExpanded(nowExpanded, $section);\r\n    // Store the state in sessionStorage when a change is triggered\r\n    $module.storeState($section);\r\n  });\r\n\r\n  $module.updateShowAllButton(nowExpanded);\r\n};\r\n\r\n// Set section attributes when opened/closed\r\nAccordion.prototype.setExpanded = function (expanded, $section) {\r\n  var $icon = $section.querySelector('.' + this.upChevronIconClass);\r\n  var $showHideText = $section.querySelector('.' + this.sectionShowHideTextClass);\r\n  var $button = $section.querySelector('.' + this.sectionButtonClass);\r\n  var newButtonText = expanded\r\n    ? this.i18n.t('hideSection')\r\n    : this.i18n.t('showSection');\r\n\r\n  $showHideText.innerText = newButtonText;\r\n  $button.setAttribute('aria-expanded', expanded);\r\n\r\n  // Update aria-label combining\r\n  var $header = $section.querySelector('.' + this.sectionHeadingTextClass);\r\n  var ariaLabelParts = [$header.innerText.trim()];\r\n\r\n  var $summary = $section.querySelector('.' + this.sectionSummaryClass);\r\n  if ($summary) {\r\n    ariaLabelParts.push($summary.innerText.trim());\r\n  }\r\n\r\n  var ariaLabelMessage = expanded\r\n    ? this.i18n.t('hideSectionAriaLabel')\r\n    : this.i18n.t('showSectionAriaLabel');\r\n  ariaLabelParts.push(ariaLabelMessage);\r\n\r\n  /*\r\n   * Join with a comma to add pause for assistive technology.\r\n   * Example: [heading]Section A ,[pause] Show this section.\r\n   * https://accessibility.blog.gov.uk/2017/12/18/what-working-on-gov-uk-navigation-taught-us-about-accessibility/\r\n   */\r\n  $button.setAttribute('aria-label', ariaLabelParts.join(' , '));\r\n\r\n  // Swap icon, change class\r\n  if (expanded) {\r\n    $section.classList.add(this.sectionExpandedClass);\r\n    $icon.classList.remove(this.downChevronIconClass);\r\n  } else {\r\n    $section.classList.remove(this.sectionExpandedClass);\r\n    $icon.classList.add(this.downChevronIconClass);\r\n  }\r\n\r\n  // See if \"Show all sections\" button text should be updated\r\n  var areAllSectionsOpen = this.checkIfAllSectionsOpen();\r\n  this.updateShowAllButton(areAllSectionsOpen);\r\n};\r\n\r\n// Get state of section\r\nAccordion.prototype.isExpanded = function ($section) {\r\n  return $section.classList.contains(this.sectionExpandedClass)\r\n};\r\n\r\n// Check if all sections are open\r\nAccordion.prototype.checkIfAllSectionsOpen = function () {\r\n  // Get a count of all the Accordion sections\r\n  var sectionsCount = this.$sections.length;\r\n  // Get a count of all Accordion sections that are expanded\r\n  var expandedSectionCount = this.$module.querySelectorAll('.' + this.sectionExpandedClass).length;\r\n  var areAllSectionsOpen = sectionsCount === expandedSectionCount;\r\n\r\n  return areAllSectionsOpen\r\n};\r\n\r\n// Update \"Show all sections\" button\r\nAccordion.prototype.updateShowAllButton = function (expanded) {\r\n  var $showAllIcon = this.$showAllButton.querySelector('.' + this.upChevronIconClass);\r\n  var $showAllText = this.$showAllButton.querySelector('.' + this.showAllTextClass);\r\n  var newButtonText = expanded\r\n    ? this.i18n.t('hideAllSections')\r\n    : this.i18n.t('showAllSections');\r\n  this.$showAllButton.setAttribute('aria-expanded', expanded);\r\n  $showAllText.innerText = newButtonText;\r\n\r\n  // Swap icon, toggle class\r\n  if (expanded) {\r\n    $showAllIcon.classList.remove(this.downChevronIconClass);\r\n  } else {\r\n    $showAllIcon.classList.add(this.downChevronIconClass);\r\n  }\r\n};\r\n\r\n// Check for `window.sessionStorage`, and that it actually works.\r\nvar helper = {\r\n  checkForSessionStorage: function () {\r\n    var testString = 'this is the test string';\r\n    var result;\r\n    try {\r\n      window.sessionStorage.setItem(testString, testString);\r\n      result = window.sessionStorage.getItem(testString) === testString.toString();\r\n      window.sessionStorage.removeItem(testString);\r\n      return result\r\n    } catch (exception) {\r\n      return false\r\n    }\r\n  }\r\n};\r\n\r\n// Set the state of the accordions in sessionStorage\r\nAccordion.prototype.storeState = function ($section) {\r\n  if (this.browserSupportsSessionStorage) {\r\n    // We need a unique way of identifying each content in the Accordion. Since\r\n    // an `#id` should be unique and an `id` is required for `aria-` attributes\r\n    // `id` can be safely used.\r\n    var $button = $section.querySelector('.' + this.sectionButtonClass);\r\n\r\n    if ($button) {\r\n      var contentId = $button.getAttribute('aria-controls');\r\n      var contentState = $button.getAttribute('aria-expanded');\r\n\r\n      // Only set the state when both `contentId` and `contentState` are taken from the DOM.\r\n      if (contentId && contentState) {\r\n        window.sessionStorage.setItem(contentId, contentState);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Read the state of the accordions from sessionStorage\r\nAccordion.prototype.setInitialState = function ($section) {\r\n  if (this.browserSupportsSessionStorage) {\r\n    var $button = $section.querySelector('.' + this.sectionButtonClass);\r\n\r\n    if ($button) {\r\n      var contentId = $button.getAttribute('aria-controls');\r\n      var contentState = contentId ? window.sessionStorage.getItem(contentId) : null;\r\n\r\n      if (contentState !== null) {\r\n        this.setExpanded(contentState === 'true', $section);\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Create an element to improve semantics of the section button with punctuation\r\n *\r\n * @returns {HTMLSpanElement} DOM element\r\n *\r\n * Adding punctuation to the button can also improve its general semantics by dividing its contents\r\n * into thematic chunks.\r\n * See https://github.com/alphagov/govuk-frontend/issues/2327#issuecomment-922957442\r\n */\r\nAccordion.prototype.getButtonPunctuationEl = function () {\r\n  var $punctuationEl = document.createElement('span');\r\n  $punctuationEl.classList.add('govuk-visually-hidden', 'govuk-accordion__section-heading-divider');\r\n  $punctuationEl.innerHTML = ', ';\r\n  return $punctuationEl\r\n};\r\n\r\n/**\r\n * Accordion config\r\n *\r\n * @typedef {object} AccordionConfig\r\n * @property {AccordionTranslations} [i18n = ACCORDION_TRANSLATIONS] - See constant {@link ACCORDION_TRANSLATIONS}\r\n */\r\n\r\n/**\r\n * Accordion translations\r\n *\r\n * @typedef {object} AccordionTranslations\r\n *\r\n * Messages used by the component for the labels of its buttons. This includes\r\n * the visible text shown on screen, and text to help assistive technology users\r\n * for the buttons toggling each section.\r\n * @property {string} [hideAllSections] - The text content for the 'Hide all\r\n * sections' button, used when at least one section is expanded.\r\n * @property {string} [hideSection] - The text content for the 'Hide'\r\n * button, used when a section is expanded.\r\n * @property {string} [hideSectionAriaLabel] - The text content appended to the\r\n * 'Hide' button's accessible name when a section is expanded.\r\n * @property {string} [showAllSections] - The text content for the 'Show all\r\n * sections' button, used when all sections are collapsed.\r\n * @property {string} [showSection] - The text content for the 'Show'\r\n * button, used when a section is collapsed.\r\n * @property {string} [showSectionAriaLabel] - The text content appended to the\r\n * 'Show' button's accessible name when a section is expanded.\r\n */\r\n\r\n(function(undefined) {\r\n\r\n// Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Window/detect.js\r\nvar detect = ('Window' in this);\r\n\r\nif (detect) return\r\n\r\n// Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Window&flags=always\r\nif ((typeof WorkerGlobalScope === \"undefined\") && (typeof importScripts !== \"function\")) {\r\n\t(function (global) {\r\n\t\tif (global.constructor) {\r\n\t\t\tglobal.Window = global.constructor;\r\n\t\t} else {\r\n\t\t\t(global.Window = global.constructor = new Function('return function Window() {}')()).prototype = this;\r\n\t\t}\r\n\t}(this));\r\n}\r\n\r\n})\r\n.call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n(function(undefined) {\r\n\r\n// Detection from https://github.com/Financial-Times/polyfill-service/blob/master/packages/polyfill-library/polyfills/Event/detect.js\r\nvar detect = (\r\n  (function(global) {\r\n\r\n  \tif (!('Event' in global)) return false;\r\n  \tif (typeof global.Event === 'function') return true;\r\n\r\n  \ttry {\r\n\r\n  \t\t// In IE 9-11, the Event object exists but cannot be instantiated\r\n  \t\tnew Event('click');\r\n  \t\treturn true;\r\n  \t} catch(e) {\r\n  \t\treturn false;\r\n  \t}\r\n  }(this))\r\n);\r\n\r\nif (detect) return\r\n\r\n// Polyfill from https://cdn.polyfill.io/v2/polyfill.js?features=Event&flags=always\r\n(function () {\r\n\tvar unlistenableWindowEvents = {\r\n\t\tclick: 1,\r\n\t\tdblclick: 1,\r\n\t\tkeyup: 1,\r\n\t\tkeypress: 1,\r\n\t\tkeydown: 1,\r\n\t\tmousedown: 1,\r\n\t\tmouseup: 1,\r\n\t\tmousemove: 1,\r\n\t\tmouseover: 1,\r\n\t\tmouseenter: 1,\r\n\t\tmouseleave: 1,\r\n\t\tmouseout: 1,\r\n\t\tstorage: 1,\r\n\t\tstoragecommit: 1,\r\n\t\ttextinput: 1\r\n\t};\r\n\r\n\t// This polyfill depends on availability of `document` so will not run in a worker\r\n\t// However, we asssume there are no browsers with worker support that lack proper\r\n\t// support for `Event` within the worker\r\n\tif (typeof document === 'undefined' || typeof window === 'undefined') return;\r\n\r\n\tfunction indexOf(array, element) {\r\n\t\tvar\r\n\t\tindex = -1,\r\n\t\tlength = array.length;\r\n\r\n\t\twhile (++index < length) {\r\n\t\t\tif (index in array && array[index] === element) {\r\n\t\t\t\treturn index;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn -1;\r\n\t}\r\n\r\n\tvar existingProto = (window.Event && window.Event.prototype) || null;\r\n\twindow.Event = Window.prototype.Event = function Event(type, eventInitDict) {\r\n\t\tif (!type) {\r\n\t\t\tthrow new Error('Not enough arguments');\r\n\t\t}\r\n\r\n\t\tvar event;\r\n\t\t// Shortcut if browser supports createEvent\r\n\t\tif ('createEvent' in document) {\r\n\t\t\tevent = document.createEvent('Event');\r\n\t\t\tvar bubbles = eventInitDict && eventInitDict.bubbles !== undefined ? eventInitDict.bubbles : false;\r\n\t\t\tvar cancelable = eventInitDict && eventInitDict.cancelable !== undefined ? eventInitDict.cancelable : false;\r\n\r\n\t\t\tevent.initEvent(type, bubbles, cancelable);\r\n\r\n\t\t\treturn event;\r\n\t\t}\r\n\r\n\t\tevent = document.createEventObject();\r\n\r\n\t\tevent.type = type;\r\n\t\tevent.bubbles = eventInitDict && eventInitDict.bubbles !== undefined ? eventInitDict.bubbles : false;\r\n\t\tevent.cancelable = eventInitDict && eventInitDict.cancelable !== undefined ? eventInitDict.cancelable : false;\r\n\r\n\t\treturn event;\r\n\t};\r\n\tif (existingProto) {\r\n\t\tObject.defineProperty(window.Event, 'prototype', {\r\n\t\t\tconfigurable: false,\r\n\t\t\tenumerable: false,\r\n\t\t\twritable: true,\r\n\t\t\tvalue: existingProto\r\n\t\t});\r\n\t}\r\n\r\n\tif (!('createEvent' in document)) {\r\n\t\twindow.addEventListener = Window.prototype.addEventListener = Document.prototype.addEventListener = Element.prototype.addEventListener = function addEventListener() {\r\n\t\t\tvar\r\n\t\t\telement = this,\r\n\t\t\ttype = arguments[0],\r\n\t\t\tlistener = arguments[1];\r\n\r\n\t\t\tif (element === window && type in unlistenableWindowEvents) {\r\n\t\t\t\tthrow new Error('In IE8 the event: ' + type + ' is not available on the window object. Please see https://github.com/Financial-Times/polyfill-service/issues/317 for more information.');\r\n\t\t\t}\r\n\r\n\t\t\tif (!element._events) {\r\n\t\t\t\telement._events = {};\r\n\t\t\t}\r\n\r\n\t\t\tif (!element._events[type]) {\r\n\t\t\t\telement._events[type] = function (event) {\r\n\t\t\t\t\tvar\r\n\t\t\t\t\tlist = element._events[event.type].list,\r\n\t\t\t\t\tevents = list.slice(),\r\n\t\t\t\t\tindex = -1,\r\n\t\t\t\t\tlength = events.length,\r\n\t\t\t\t\teventElement;\r\n\r\n\t\t\t\t\tevent.preventDefault = function preventDefault() {\r\n\t\t\t\t\t\tif (event.cancelable !== false) {\r\n\t\t\t\t\t\t\tevent.returnValue = false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tevent.stopPropagation = function stopPropagation() {\r\n\t\t\t\t\t\tevent.cancelBubble = true;\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tevent.stopImmediatePropagation = function stopImmediatePropagation() {\r\n\t\t\t\t\t\tevent.cancelBubble = true;\r\n\t\t\t\t\t\tevent.cancelImmediate = true;\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tevent.currentTarget = element;\r\n\t\t\t\t\tevent.relatedTarget = event.fromElement || null;\r\n\t\t\t\t\tevent.target = event.target || event.srcElement || element;\r\n\t\t\t\t\tevent.timeStamp = new Date().getTime();\r\n\r\n\t\t\t\t\tif (event.clientX) {\r\n\t\t\t\t\t\tevent.pageX = event.clientX + document.documentElement.scrollLeft;\r\n\t\t\t\t\t\tevent.pageY = event.clientY + document.documentElement.scrollTop;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\twhile (++index < length && !event.cancelImmediate) {\r\n\t\t\t\t\t\tif (index in events) {\r\n\t\t\t\t\t\t\teventElement = events[index];\r\n\r\n\t\t\t\t\t\t\tif (indexOf(list, eventElement) !== -1 && typeof eventElement === 'function') {\r\n\t\t\t\t\t\t\t\teventElement.call(element, event);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\r\n\t\t\t\telement._events[type].list = [];\r\n\r\n\t\t\t\tif (element.attachEvent) {\r\n\t\t\t\t\telement.attachEvent('on' + type, element._events[type]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\telement._events[type].list.push(listener);\r\n\t\t};\r\n\r\n\t\twindow.removeEventListener = Window.prototype.removeEventListener = Document.prototype.removeEventListener = Element.prototype.removeEventListener = function removeEventListener() {\r\n\t\t\tvar\r\n\t\t\telement = this,\r\n\t\t\ttype = arguments[0],\r\n\t\t\tlistener = arguments[1],\r\n\t\t\tindex;\r\n\r\n\t\t\tif (element._events && element._events[type] && element._events[type].list) {\r\n\t\t\t\tindex = indexOf(element._events[type].list, listener);\r\n\r\n\t\t\t\tif (index !== -1) {\r\n\t\t\t\t\telement._events[type].list.splice(index, 1);\r\n\r\n\t\t\t\t\tif (!element._events[type].list.length) {\r\n\t\t\t\t\t\tif (element.detachEvent) {\r\n\t\t\t\t\t\t\telement.detachEvent('on' + type, element._events[type]);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tdelete element._events[type];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\twindow.dispatchEvent = Window.prototype.dispatchEvent = Document.prototype.dispatchEvent = Element.prototype.dispatchEvent = function dispatchEvent(event) {\r\n\t\t\tif (!arguments.length) {\r\n\t\t\t\tthrow new Error('Not enough arguments');\r\n\t\t\t}\r\n\r\n\t\t\tif (!event || typeof event.type !== 'string') {\r\n\t\t\t\tthrow new Error('DOM Events Exception 0');\r\n\t\t\t}\r\n\r\n\t\t\tvar element = this, type = event.type;\r\n\r\n\t\t\ttry {\r\n\t\t\t\tif (!event.bubbles) {\r\n\t\t\t\t\tevent.cancelBubble = true;\r\n\r\n\t\t\t\t\tvar cancelBubbleEvent = function (event) {\r\n\t\t\t\t\t\tevent.cancelBubble = true;\r\n\r\n\t\t\t\t\t\t(element || window).detachEvent('on' + type, cancelBubbleEvent);\r\n\t\t\t\t\t};\r\n\r\n\t\t\t\t\tthis.attachEvent('on' + type, cancelBubbleEvent);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.fireEvent('on' + type, event);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tevent.target = element;\r\n\r\n\t\t\t\tdo {\r\n\t\t\t\t\tevent.currentTarget = element;\r\n\r\n\t\t\t\t\tif ('_events' in element && typeof element._events[type] === 'function') {\r\n\t\t\t\t\t\telement._events[type].call(element, event);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif (typeof element['on' + type] === 'function') {\r\n\t\t\t\t\t\telement['on' + type].call(element, event);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\telement = element.nodeType === 9 ? element.parentWindow : element.parentNode;\r\n\t\t\t\t} while (element && !event.cancelBubble);\r\n\t\t\t}\r\n\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// Add the DOMContentLoaded Event\r\n\t\tdocument.attachEvent('onreadystatechange', function() {\r\n\t\t\tif (document.readyState === 'complete') {\r\n\t\t\t\tdocument.dispatchEvent(new Event('DOMContentLoaded', {\r\n\t\t\t\t\tbubbles: true\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n}());\r\n\r\n})\r\n.call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\nvar KEY_SPACE = 32;\r\nvar DEBOUNCE_TIMEOUT_IN_SECONDS = 1;\r\n\r\n/**\r\n * JavaScript enhancements for the Button component\r\n *\r\n * @class\r\n * @param {HTMLElement} $module - The element this component controls\r\n * @param {ButtonConfig} config - Button config\r\n */\r\nfunction Button ($module, config) {\r\n  if (!$module) {\r\n    return this\r\n  }\r\n\r\n  this.$module = $module;\r\n  this.debounceFormSubmitTimer = null;\r\n\r\n  var defaultConfig = {\r\n    preventDoubleClick: false\r\n  };\r\n  this.config = mergeConfigs(\r\n    defaultConfig,\r\n    config || {},\r\n    normaliseDataset($module.dataset)\r\n  );\r\n}\r\n\r\n/**\r\n * Initialise component\r\n */\r\nButton.prototype.init = function () {\r\n  if (!this.$module) {\r\n    return\r\n  }\r\n\r\n  this.$module.addEventListener('keydown', this.handleKeyDown);\r\n  this.$module.addEventListener('click', this.debounce.bind(this));\r\n};\r\n\r\n/**\r\n * Trigger a click event when the space key is pressed\r\n *\r\n * Some screen readers tell users they can activate things with the 'button'\r\n * role, so we need to match the functionality of native HTML buttons\r\n *\r\n * See https://github.com/alphagov/govuk_elements/pull/272#issuecomment-233028270\r\n *\r\n * @param {KeyboardEvent} event\r\n */\r\nButton.prototype.handleKeyDown = function (event) {\r\n  var target = event.target;\r\n\r\n  if (target.getAttribute('role') === 'button' && event.keyCode === KEY_SPACE) {\r\n    event.preventDefault(); // prevent the page from scrolling\r\n    target.click();\r\n  }\r\n};\r\n\r\n/**\r\n * Debounce double-clicks\r\n *\r\n * If the click quickly succeeds a previous click then nothing will happen. This\r\n * stops people accidentally causing multiple form submissions by double\r\n * clicking buttons.\r\n *\r\n * @param {MouseEvent} event\r\n * @returns {undefined | false} - Returns undefined, or false when debounced\r\n */\r\nButton.prototype.debounce = function (event) {\r\n  // Check the button that was clicked has preventDoubleClick enabled\r\n  if (!this.config.preventDoubleClick) {\r\n    return\r\n  }\r\n\r\n  // If the timer is still running, prevent the click from submitting the form\r\n  if (this.debounceFormSubmitTimer) {\r\n    event.preventDefault();\r\n    return false\r\n  }\r\n\r\n  this.debounceFormSubmitTimer = setTimeout(function () {\r\n    this.debounceFormSubmitTimer = null;\r\n  }.bind(this), DEBOUNCE_TIMEOUT_IN_SECONDS * 1000);\r\n};\r\n\r\n/**\r\n * Button config\r\n *\r\n * @typedef {object} ButtonConfig\r\n * @property {boolean} [preventDoubleClick = false] -\r\n *  Prevent accidental double clicks on submit buttons from submitting forms\r\n *  multiple times.\r\n */\r\n\r\n/**\r\n * JavaScript 'polyfill' for HTML5's <details> and <summary> elements\r\n * and 'shim' to add accessiblity enhancements for all browsers\r\n *\r\n * http://caniuse.com/#feat=details\r\n */\r\n\r\nvar KEY_ENTER = 13;\r\nvar KEY_SPACE$1 = 32;\r\n\r\n/**\r\n * Details component\r\n *\r\n * @class\r\n * @param {HTMLElement} $module - HTML element to use for details\r\n */\r\nfunction Details ($module) {\r\n  this.$module = $module;\r\n}\r\n\r\nDetails.prototype.init = function () {\r\n  if (!this.$module) {\r\n    return\r\n  }\r\n\r\n  // If there is native details support, we want to avoid running code to polyfill native behaviour.\r\n  var hasNativeDetails = typeof this.$module.open === 'boolean';\r\n\r\n  if (hasNativeDetails) {\r\n    return\r\n  }\r\n\r\n  this.polyfillDetails();\r\n};\r\n\r\nDetails.prototype.polyfillDetails = function () {\r\n  var $module = this.$module;\r\n\r\n  // Save shortcuts to the inner summary and content elements\r\n  var $summary = this.$summary = $module.getElementsByTagName('summary').item(0);\r\n  var $content = this.$content = $module.getElementsByTagName('div').item(0);\r\n\r\n  // If <details> doesn't have a <summary> and a <div> representing the content\r\n  // it means the required HTML structure is not met so the script will stop\r\n  if (!$summary || !$content) {\r\n    return\r\n  }\r\n\r\n  // If the content doesn't have an ID, assign it one now\r\n  // which we'll need for the summary's aria-controls assignment\r\n  if (!$content.id) {\r\n    $content.id = 'details-content-' + generateUniqueID();\r\n  }\r\n\r\n  // Add ARIA role=\"group\" to details\r\n  $module.setAttribute('role', 'group');\r\n\r\n  // Add role=button to summary\r\n  $summary.setAttribute('role', 'button');\r\n\r\n  // Add aria-controls\r\n  $summary.setAttribute('aria-controls', $content.id);\r\n\r\n  // Set tabIndex so the summary is keyboard accessible for non-native elements\r\n  //\r\n  // We have to use the camelcase `tabIndex` property as there is a bug in IE6/IE7 when we set the correct attribute lowercase:\r\n  // See http://web.archive.org/web/20170120194036/http://www.saliences.com/browserBugs/tabIndex.html for more information.\r\n  $summary.tabIndex = 0;\r\n\r\n  // Detect initial open state\r\n  if (this.$module.hasAttribute('open')) {\r\n    $summary.setAttribute('aria-expanded', 'true');\r\n  } else {\r\n    $summary.setAttribute('aria-expanded', 'false');\r\n    $content.style.display = 'none';\r\n  }\r\n\r\n  // Bind an event to handle summary elements\r\n  this.polyfillHandleInputs($summary, this.polyfillSetAttributes.bind(this));\r\n};\r\n\r\n/**\r\n * Define a statechange function that updates aria-expanded and style.display\r\n *\r\n * @returns {boolean} Returns true\r\n */\r\nDetails.prototype.polyfillSetAttributes = function () {\r\n  if (this.$module.hasAttribute('open')) {\r\n    this.$module.removeAttribute('open');\r\n    this.$summary.setAttribute('aria-expanded', 'false');\r\n    this.$content.style.display = 'none';\r\n  } else {\r\n    this.$module.setAttribute('open', 'open');\r\n    this.$summary.setAttribute('aria-expanded', 'true');\r\n    this.$content.style.display = '';\r\n  }\r\n\r\n  return true\r\n};\r\n\r\n/**\r\n * Handle cross-modal click events\r\n *\r\n * @param {object} node - element\r\n * @param {polyfillHandleInputsCallback} callback - function\r\n */\r\nDetails.prototype.polyfillHandleInputs = function (node, callback) {\r\n  node.addEventListener('keypress', function (event) {\r\n    var target = event.target;\r\n    // When the key gets pressed - check if it is enter or space\r\n    if (event.keyCode === KEY_ENTER || event.keyCode === KEY_SPACE$1) {\r\n      if (target.nodeName.toLowerCase() === 'summary') {\r\n        // Prevent space from scrolling the page\r\n        // and enter from submitting a form\r\n        event.preventDefault();\r\n        // Click to let the click event do all the necessary action\r\n        if (target.click) {\r\n          target.click();\r\n        } else {\r\n          // except Safari 5.1 and under don't support .click() here\r\n          callback(event);\r\n        }\r\n      }\r\n    }\r\n  });\r\n\r\n  // Prevent keyup to prevent clicking twice in Firefox when using space key\r\n  node.addEventListener('keyup', function (event) {\r\n    var target = event.target;\r\n    if (event.keyCode === KEY_SPACE$1) {\r\n      if (target.nodeName.toLowerCase() === 'summary') {\r\n        event.preventDefault();\r\n      }\r\n    }\r\n  });\r\n\r\n  node.addEventListener('click', callback);\r\n};\r\n\r\n/**\r\n * @callback polyfillHandleInputsCallback\r\n * @param {KeyboardEvent} event - Keyboard event\r\n * @returns {undefined}\r\n */\r\n\r\n(function(undefined) {\r\n\r\n    // Detection from https://github.com/Financial-Times/polyfill-library/blob/v3.111.0/polyfills/Date/now/detect.js\r\n    var detect = ('Date' in self && 'now' in self.Date && 'getTime' in self.Date.prototype);\r\n\r\n    if (detect) return\r\n\r\n    // Polyfill from https://polyfill.io/v3/polyfill.js?version=3.111.0&features=Date.now&flags=always\r\n    Date.now = function () {\r\n        return new Date().getTime();\r\n    };\r\n\r\n}).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n(function(undefined) {\r\n\r\n  // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-service/1f3c09b402f65bf6e393f933a15ba63f1b86ef1f/packages/polyfill-library/polyfills/Element/prototype/matches/detect.js\r\n  var detect = (\r\n    'document' in this && \"matches\" in document.documentElement\r\n  );\r\n\r\n  if (detect) return\r\n\r\n  // Polyfill from https://raw.githubusercontent.com/Financial-Times/polyfill-service/1f3c09b402f65bf6e393f933a15ba63f1b86ef1f/packages/polyfill-library/polyfills/Element/prototype/matches/polyfill.js\r\n  Element.prototype.matches = Element.prototype.webkitMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.mozMatchesSelector || function matches(selector) {\r\n    var element = this;\r\n    var elements = (element.document || element.ownerDocument).querySelectorAll(selector);\r\n    var index = 0;\r\n\r\n    while (elements[index] && elements[index] !== element) {\r\n      ++index;\r\n    }\r\n\r\n    return !!elements[index];\r\n  };\r\n\r\n}).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n(function(undefined) {\r\n\r\n  // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-service/1f3c09b402f65bf6e393f933a15ba63f1b86ef1f/packages/polyfill-library/polyfills/Element/prototype/closest/detect.js\r\n  var detect = (\r\n    'document' in this && \"closest\" in document.documentElement\r\n  );\r\n\r\n  if (detect) return\r\n\r\n  // Polyfill from https://raw.githubusercontent.com/Financial-Times/polyfill-service/1f3c09b402f65bf6e393f933a15ba63f1b86ef1f/packages/polyfill-library/polyfills/Element/prototype/closest/polyfill.js\r\n  Element.prototype.closest = function closest(selector) {\r\n    var node = this;\r\n\r\n    while (node) {\r\n      if (node.matches(selector)) return node;\r\n      else node = 'SVGElement' in window && node instanceof SVGElement ? node.parentNode : node.parentElement;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n}).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n/**\r\n * Returns the value of the given attribute closest to the given element (including itself)\r\n *\r\n * @param {HTMLElement} $element - The element to start walking the DOM tree up\r\n * @param {string} attributeName - The name of the attribute\r\n * @returns {string | undefined} Attribute value\r\n */\r\nfunction closestAttributeValue ($element, attributeName) {\r\n  var closestElementWithAttribute = $element.closest('[' + attributeName + ']');\r\n  if (closestElementWithAttribute) {\r\n    return closestElementWithAttribute.getAttribute(attributeName)\r\n  }\r\n}\r\n\r\n/**\r\n * @constant\r\n * @type {CharacterCountTranslations}\r\n * @see Default value for {@link CharacterCountConfig.i18n}\r\n * @default\r\n */\r\nvar CHARACTER_COUNT_TRANSLATIONS = {\r\n  // Characters\r\n  charactersUnderLimit: {\r\n    one: 'You have %{count} character remaining',\r\n    other: 'You have %{count} characters remaining'\r\n  },\r\n  charactersAtLimit: 'You have 0 characters remaining',\r\n  charactersOverLimit: {\r\n    one: 'You have %{count} character too many',\r\n    other: 'You have %{count} characters too many'\r\n  },\r\n  // Words\r\n  wordsUnderLimit: {\r\n    one: 'You have %{count} word remaining',\r\n    other: 'You have %{count} words remaining'\r\n  },\r\n  wordsAtLimit: 'You have 0 words remaining',\r\n  wordsOverLimit: {\r\n    one: 'You have %{count} word too many',\r\n    other: 'You have %{count} words too many'\r\n  },\r\n  textareaDescription: {\r\n    other: ''\r\n  }\r\n};\r\n\r\n/**\r\n * JavaScript enhancements for the CharacterCount component\r\n *\r\n * Tracks the number of characters or words in the `.govuk-js-character-count`\r\n * `<textarea>` inside the element. Displays a message with the remaining number\r\n * of characters/words available, or the number of characters/words in excess.\r\n *\r\n * You can configure the message to only appear after a certain percentage\r\n * of the available characters/words has been entered.\r\n *\r\n * @class\r\n * @param {HTMLElement} $module - The element this component controls\r\n * @param {CharacterCountConfig} [config] - Character count config\r\n */\r\nfunction CharacterCount ($module, config) {\r\n  if (!$module) {\r\n    return this\r\n  }\r\n\r\n  var defaultConfig = {\r\n    threshold: 0,\r\n    i18n: CHARACTER_COUNT_TRANSLATIONS\r\n  };\r\n\r\n  // Read config set using dataset ('data-' values)\r\n  var datasetConfig = normaliseDataset($module.dataset);\r\n\r\n  // To ensure data-attributes take complete precedence, even if they change the\r\n  // type of count, we need to reset the `maxlength` and `maxwords` from the\r\n  // JavaScript config.\r\n  //\r\n  // We can't mutate `config`, though, as it may be shared across multiple\r\n  // components inside `initAll`.\r\n  var configOverrides = {};\r\n  if ('maxwords' in datasetConfig || 'maxlength' in datasetConfig) {\r\n    configOverrides = {\r\n      maxlength: false,\r\n      maxwords: false\r\n    };\r\n  }\r\n\r\n  this.config = mergeConfigs(\r\n    defaultConfig,\r\n    config || {},\r\n    configOverrides,\r\n    datasetConfig\r\n  );\r\n\r\n  this.i18n = new I18n(extractConfigByNamespace(this.config, 'i18n'), {\r\n    // Read the fallback if necessary rather than have it set in the defaults\r\n    locale: closestAttributeValue($module, 'lang')\r\n  });\r\n\r\n  // Determine the limit attribute (characters or words)\r\n  if (this.config.maxwords) {\r\n    this.maxLength = this.config.maxwords;\r\n  } else if (this.config.maxlength) {\r\n    this.maxLength = this.config.maxlength;\r\n  } else {\r\n    return\r\n  }\r\n\r\n  this.$module = $module;\r\n  this.$textarea = $module.querySelector('.govuk-js-character-count');\r\n  this.$visibleCountMessage = null;\r\n  this.$screenReaderCountMessage = null;\r\n  this.lastInputTimestamp = null;\r\n}\r\n\r\n/**\r\n * Initialise component\r\n */\r\nCharacterCount.prototype.init = function () {\r\n  // Check that required elements are present\r\n  if (!this.$textarea) {\r\n    return\r\n  }\r\n\r\n  var $textarea = this.$textarea;\r\n  var $textareaDescription = document.getElementById($textarea.id + '-info');\r\n\r\n  // Inject a decription for the textarea if none is present already\r\n  // for when the component was rendered with no maxlength, maxwords\r\n  // nor custom textareaDescriptionText\r\n  if ($textareaDescription.innerText.match(/^\\s*$/)) {\r\n    $textareaDescription.innerText = this.i18n.t('textareaDescription', { count: this.maxLength });\r\n  }\r\n\r\n  // Move the textarea description to be immediately after the textarea\r\n  // Kept for backwards compatibility\r\n  $textarea.insertAdjacentElement('afterend', $textareaDescription);\r\n\r\n  // Create the *screen reader* specific live-updating counter\r\n  // This doesn't need any styling classes, as it is never visible\r\n  var $screenReaderCountMessage = document.createElement('div');\r\n  $screenReaderCountMessage.className = 'govuk-character-count__sr-status govuk-visually-hidden';\r\n  $screenReaderCountMessage.setAttribute('aria-live', 'polite');\r\n  this.$screenReaderCountMessage = $screenReaderCountMessage;\r\n  $textareaDescription.insertAdjacentElement('afterend', $screenReaderCountMessage);\r\n\r\n  // Create our live-updating counter element, copying the classes from the\r\n  // textarea description for backwards compatibility as these may have been\r\n  // configured\r\n  var $visibleCountMessage = document.createElement('div');\r\n  $visibleCountMessage.className = $textareaDescription.className;\r\n  $visibleCountMessage.classList.add('govuk-character-count__status');\r\n  $visibleCountMessage.setAttribute('aria-hidden', 'true');\r\n  this.$visibleCountMessage = $visibleCountMessage;\r\n  $textareaDescription.insertAdjacentElement('afterend', $visibleCountMessage);\r\n\r\n  // Hide the textarea description\r\n  $textareaDescription.classList.add('govuk-visually-hidden');\r\n\r\n  // Remove hard limit if set\r\n  $textarea.removeAttribute('maxlength');\r\n\r\n  this.bindChangeEvents();\r\n\r\n  // When the page is restored after navigating 'back' in some browsers the\r\n  // state of the character count is not restored until *after* the\r\n  // DOMContentLoaded event is fired, so we need to manually update it after the\r\n  // pageshow event in browsers that support it.\r\n  if ('onpageshow' in window) {\r\n    window.addEventListener('pageshow', this.updateCountMessage.bind(this));\r\n  } else {\r\n    window.addEventListener('DOMContentLoaded', this.updateCountMessage.bind(this));\r\n  }\r\n  this.updateCountMessage();\r\n};\r\n\r\n/**\r\n * Bind change events\r\n *\r\n * Set up event listeners on the $textarea so that the count messages update\r\n * when the user types.\r\n */\r\nCharacterCount.prototype.bindChangeEvents = function () {\r\n  var $textarea = this.$textarea;\r\n  $textarea.addEventListener('keyup', this.handleKeyUp.bind(this));\r\n\r\n  // Bind focus/blur events to start/stop polling\r\n  $textarea.addEventListener('focus', this.handleFocus.bind(this));\r\n  $textarea.addEventListener('blur', this.handleBlur.bind(this));\r\n};\r\n\r\n/**\r\n * Handle key up event\r\n *\r\n * Update the visible character counter and keep track of when the last update\r\n * happened for each keypress\r\n */\r\nCharacterCount.prototype.handleKeyUp = function () {\r\n  this.updateVisibleCountMessage();\r\n  this.lastInputTimestamp = Date.now();\r\n};\r\n\r\n/**\r\n * Handle focus event\r\n *\r\n * Speech recognition software such as Dragon NaturallySpeaking will modify the\r\n * fields by directly changing its `value`. These changes don't trigger events\r\n * in JavaScript, so we need to poll to handle when and if they occur.\r\n *\r\n * Once the keyup event hasn't been detected for at least 1000 ms (1s), check if\r\n * the textarea value has changed and update the count message if it has.\r\n *\r\n * This is so that the update triggered by the manual comparison doesn't\r\n * conflict with debounced KeyboardEvent updates.\r\n */\r\nCharacterCount.prototype.handleFocus = function () {\r\n  this.valueChecker = setInterval(function () {\r\n    if (!this.lastInputTimestamp || (Date.now() - 500) >= this.lastInputTimestamp) {\r\n      this.updateIfValueChanged();\r\n    }\r\n  }.bind(this), 1000);\r\n};\r\n\r\n/**\r\n * Handle blur event\r\n *\r\n * Stop checking the textarea value once the textarea no longer has focus\r\n */\r\nCharacterCount.prototype.handleBlur = function () {\r\n  // Cancel value checking on blur\r\n  clearInterval(this.valueChecker);\r\n};\r\n\r\n/**\r\n * Update count message if textarea value has changed\r\n */\r\nCharacterCount.prototype.updateIfValueChanged = function () {\r\n  if (!this.$textarea.oldValue) this.$textarea.oldValue = '';\r\n  if (this.$textarea.value !== this.$textarea.oldValue) {\r\n    this.$textarea.oldValue = this.$textarea.value;\r\n    this.updateCountMessage();\r\n  }\r\n};\r\n\r\n/**\r\n * Update count message\r\n *\r\n * Helper function to update both the visible and screen reader-specific\r\n * counters simultaneously (e.g. on init)\r\n */\r\nCharacterCount.prototype.updateCountMessage = function () {\r\n  this.updateVisibleCountMessage();\r\n  this.updateScreenReaderCountMessage();\r\n};\r\n\r\n/**\r\n * Update visible count message\r\n */\r\nCharacterCount.prototype.updateVisibleCountMessage = function () {\r\n  var $textarea = this.$textarea;\r\n  var $visibleCountMessage = this.$visibleCountMessage;\r\n  var remainingNumber = this.maxLength - this.count($textarea.value);\r\n\r\n  // If input is over the threshold, remove the disabled class which renders the\r\n  // counter invisible.\r\n  if (this.isOverThreshold()) {\r\n    $visibleCountMessage.classList.remove('govuk-character-count__message--disabled');\r\n  } else {\r\n    $visibleCountMessage.classList.add('govuk-character-count__message--disabled');\r\n  }\r\n\r\n  // Update styles\r\n  if (remainingNumber < 0) {\r\n    $textarea.classList.add('govuk-textarea--error');\r\n    $visibleCountMessage.classList.remove('govuk-hint');\r\n    $visibleCountMessage.classList.add('govuk-error-message');\r\n  } else {\r\n    $textarea.classList.remove('govuk-textarea--error');\r\n    $visibleCountMessage.classList.remove('govuk-error-message');\r\n    $visibleCountMessage.classList.add('govuk-hint');\r\n  }\r\n\r\n  // Update message\r\n  $visibleCountMessage.innerText = this.getCountMessage();\r\n};\r\n\r\n/**\r\n * Update screen reader count message\r\n */\r\nCharacterCount.prototype.updateScreenReaderCountMessage = function () {\r\n  var $screenReaderCountMessage = this.$screenReaderCountMessage;\r\n\r\n  // If over the threshold, remove the aria-hidden attribute, allowing screen\r\n  // readers to announce the content of the element.\r\n  if (this.isOverThreshold()) {\r\n    $screenReaderCountMessage.removeAttribute('aria-hidden');\r\n  } else {\r\n    $screenReaderCountMessage.setAttribute('aria-hidden', true);\r\n  }\r\n\r\n  // Update message\r\n  $screenReaderCountMessage.innerText = this.getCountMessage();\r\n};\r\n\r\n/**\r\n * Count the number of characters (or words, if `config.maxwords` is set)\r\n * in the given text\r\n *\r\n * @param {string} text - The text to count the characters of\r\n * @returns {number} the number of characters (or words) in the text\r\n */\r\nCharacterCount.prototype.count = function (text) {\r\n  if (this.config.maxwords) {\r\n    var tokens = text.match(/\\S+/g) || []; // Matches consecutive non-whitespace chars\r\n    return tokens.length\r\n  } else {\r\n    return text.length\r\n  }\r\n};\r\n\r\n/**\r\n * Get count message\r\n *\r\n * @returns {string} Status message\r\n */\r\nCharacterCount.prototype.getCountMessage = function () {\r\n  var remainingNumber = this.maxLength - this.count(this.$textarea.value);\r\n\r\n  var countType = this.config.maxwords ? 'words' : 'characters';\r\n  return this.formatCountMessage(remainingNumber, countType)\r\n};\r\n\r\n/**\r\n * Formats the message shown to users according to what's counted\r\n * and how many remain\r\n *\r\n * @param {number} remainingNumber - The number of words/characaters remaining\r\n * @param {string} countType - \"words\" or \"characters\"\r\n * @returns {string} Status message\r\n */\r\nCharacterCount.prototype.formatCountMessage = function (remainingNumber, countType) {\r\n  if (remainingNumber === 0) {\r\n    return this.i18n.t(countType + 'AtLimit')\r\n  }\r\n\r\n  var translationKeySuffix = remainingNumber < 0 ? 'OverLimit' : 'UnderLimit';\r\n\r\n  return this.i18n.t(countType + translationKeySuffix, { count: Math.abs(remainingNumber) })\r\n};\r\n\r\n/**\r\n * Check if count is over threshold\r\n *\r\n * Checks whether the value is over the configured threshold for the input.\r\n * If there is no configured threshold, it is set to 0 and this function will\r\n * always return true.\r\n *\r\n * @returns {boolean} true if the current count is over the config.threshold\r\n *   (or no threshold is set)\r\n */\r\nCharacterCount.prototype.isOverThreshold = function () {\r\n  // No threshold means we're always above threshold so save some computation\r\n  if (!this.config.threshold) {\r\n    return true\r\n  }\r\n\r\n  var $textarea = this.$textarea;\r\n\r\n  // Determine the remaining number of characters/words\r\n  var currentLength = this.count($textarea.value);\r\n  var maxLength = this.maxLength;\r\n\r\n  var thresholdValue = maxLength * this.config.threshold / 100;\r\n\r\n  return (thresholdValue <= currentLength)\r\n};\r\n\r\n/**\r\n * Character count config\r\n *\r\n * @typedef {CharacterCountConfigWithMaxLength | CharacterCountConfigWithMaxWords} CharacterCountConfig\r\n */\r\n\r\n/**\r\n * Character count config (with maximum number of characters)\r\n *\r\n * @typedef {object} CharacterCountConfigWithMaxLength\r\n * @property {number} [maxlength] - The maximum number of characters.\r\n *  If maxwords is provided, the maxlength option will be ignored.\r\n * @property {number} [threshold = 0] - The percentage value of the limit at\r\n *  which point the count message is displayed. If this attribute is set, the\r\n *  count message will be hidden by default.\r\n * @property {CharacterCountTranslations} [i18n = CHARACTER_COUNT_TRANSLATIONS] - See constant {@link CHARACTER_COUNT_TRANSLATIONS}\r\n */\r\n\r\n/**\r\n * Character count config (with maximum number of words)\r\n *\r\n * @typedef {object} CharacterCountConfigWithMaxWords\r\n * @property {number} [maxwords] - The maximum number of words. If maxwords is\r\n *  provided, the maxlength option will be ignored.\r\n * @property {number} [threshold = 0] - The percentage value of the limit at\r\n *  which point the count message is displayed. If this attribute is set, the\r\n *  count message will be hidden by default.\r\n * @property {CharacterCountTranslations} [i18n = CHARACTER_COUNT_TRANSLATIONS] - See constant {@link CHARACTER_COUNT_TRANSLATIONS}\r\n */\r\n\r\n/**\r\n * Character count translations\r\n *\r\n * @typedef {object} CharacterCountTranslations\r\n *\r\n * Messages shown to users as they type. It provides feedback on how many words\r\n * or characters they have remaining or if they are over the limit. This also\r\n * includes a message used as an accessible description for the textarea.\r\n * @property {TranslationPluralForms} [charactersUnderLimit] - Message displayed\r\n *   when the number of characters is under the configured maximum, `maxlength`.\r\n *   This message is displayed visually and through assistive technologies. The\r\n *   component will replace the `%{count}` placeholder with the number of\r\n *   remaining characters. This is a [pluralised list of\r\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\r\n * @property {string} [charactersAtLimit] - Message displayed when the number of\r\n *   characters reaches the configured maximum, `maxlength`. This message is\r\n *   displayed visually and through assistive technologies.\r\n * @property {TranslationPluralForms} [charactersOverLimit] - Message displayed\r\n *   when the number of characters is over the configured maximum, `maxlength`.\r\n *   This message is displayed visually and through assistive technologies. The\r\n *   component will replace the `%{count}` placeholder with the number of\r\n *   remaining characters. This is a [pluralised list of\r\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\r\n * @property {TranslationPluralForms} [wordsUnderLimit] - Message displayed when\r\n *   the number of words is under the configured maximum, `maxlength`. This\r\n *   message is displayed visually and through assistive technologies. The\r\n *   component will replace the `%{count}` placeholder with the number of\r\n *   remaining words. This is a [pluralised list of\r\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\r\n * @property {string} [wordsAtLimit] - Message displayed when the number of\r\n *   words reaches the configured maximum, `maxlength`. This message is\r\n *   displayed visually and through assistive technologies.\r\n * @property {TranslationPluralForms} [wordsOverLimit] - Message displayed when\r\n *   the number of words is over the configured maximum, `maxlength`. This\r\n *   message is displayed visually and through assistive technologies. The\r\n *   component will replace the `%{count}` placeholder with the number of\r\n *   remaining words. This is a [pluralised list of\r\n *   messages](https://frontend.design-system.service.gov.uk/localise-govuk-frontend).\r\n * @property {TranslationPluralForms} [textareaDescription] - Message made\r\n *   available to assistive technologies, if none is already present in the\r\n *   HTML, to describe that the component accepts only a limited amount of\r\n *   content. It is visible on the page when JavaScript is unavailable. The\r\n *   component will replace the `%{count}` placeholder with the value of the\r\n *   `maxlength` or `maxwords` parameter.\r\n */\r\n\r\n/**\r\n * @typedef {import('../../i18n.mjs').TranslationPluralForms} TranslationPluralForms\r\n */\r\n\r\n/**\r\n * Checkboxes component\r\n *\r\n * @class\r\n * @param {HTMLElement} $module - HTML element to use for checkboxes\r\n */\r\nfunction Checkboxes ($module) {\r\n  this.$module = $module;\r\n  this.$inputs = $module.querySelectorAll('input[type=\"checkbox\"]');\r\n}\r\n\r\n/**\r\n * Initialise Checkboxes\r\n *\r\n * Checkboxes can be associated with a 'conditionally revealed' content block –\r\n * for example, a checkbox for 'Phone' could reveal an additional form field for\r\n * the user to enter their phone number.\r\n *\r\n * These associations are made using a `data-aria-controls` attribute, which is\r\n * promoted to an aria-controls attribute during initialisation.\r\n *\r\n * We also need to restore the state of any conditional reveals on the page (for\r\n * example if the user has navigated back), and set up event handlers to keep\r\n * the reveal in sync with the checkbox state.\r\n */\r\nCheckboxes.prototype.init = function () {\r\n  var $module = this.$module;\r\n  var $inputs = this.$inputs;\r\n\r\n  nodeListForEach($inputs, function ($input) {\r\n    var target = $input.getAttribute('data-aria-controls');\r\n\r\n    // Skip checkboxes without data-aria-controls attributes, or where the\r\n    // target element does not exist.\r\n    if (!target || !document.getElementById(target)) {\r\n      return\r\n    }\r\n\r\n    // Promote the data-aria-controls attribute to a aria-controls attribute\r\n    // so that the relationship is exposed in the AOM\r\n    $input.setAttribute('aria-controls', target);\r\n    $input.removeAttribute('data-aria-controls');\r\n  });\r\n\r\n  // When the page is restored after navigating 'back' in some browsers the\r\n  // state of form controls is not restored until *after* the DOMContentLoaded\r\n  // event is fired, so we need to sync after the pageshow event in browsers\r\n  // that support it.\r\n  if ('onpageshow' in window) {\r\n    window.addEventListener('pageshow', this.syncAllConditionalReveals.bind(this));\r\n  } else {\r\n    window.addEventListener('DOMContentLoaded', this.syncAllConditionalReveals.bind(this));\r\n  }\r\n\r\n  // Although we've set up handlers to sync state on the pageshow or\r\n  // DOMContentLoaded event, init could be called after those events have fired,\r\n  // for example if they are added to the page dynamically, so sync now too.\r\n  this.syncAllConditionalReveals();\r\n\r\n  $module.addEventListener('click', this.handleClick.bind(this));\r\n};\r\n\r\n/**\r\n * Sync the conditional reveal states for all inputs in this $module.\r\n */\r\nCheckboxes.prototype.syncAllConditionalReveals = function () {\r\n  nodeListForEach(this.$inputs, this.syncConditionalRevealWithInputState.bind(this));\r\n};\r\n\r\n/**\r\n * Sync conditional reveal with the input state\r\n *\r\n * Synchronise the visibility of the conditional reveal, and its accessible\r\n * state, with the input's checked state.\r\n *\r\n * @param {HTMLInputElement} $input - Checkbox input\r\n */\r\nCheckboxes.prototype.syncConditionalRevealWithInputState = function ($input) {\r\n  var $target = document.getElementById($input.getAttribute('aria-controls'));\r\n\r\n  if ($target && $target.classList.contains('govuk-checkboxes__conditional')) {\r\n    var inputIsChecked = $input.checked;\r\n\r\n    $input.setAttribute('aria-expanded', inputIsChecked);\r\n    $target.classList.toggle('govuk-checkboxes__conditional--hidden', !inputIsChecked);\r\n  }\r\n};\r\n\r\n/**\r\n * Uncheck other checkboxes\r\n *\r\n * Find any other checkbox inputs with the same name value, and uncheck them.\r\n * This is useful for when a “None of these\" checkbox is checked.\r\n */\r\nCheckboxes.prototype.unCheckAllInputsExcept = function ($input) {\r\n  var allInputsWithSameName = document.querySelectorAll('input[type=\"checkbox\"][name=\"' + $input.name + '\"]');\r\n\r\n  nodeListForEach(allInputsWithSameName, function ($inputWithSameName) {\r\n    var hasSameFormOwner = ($input.form === $inputWithSameName.form);\r\n    if (hasSameFormOwner && $inputWithSameName !== $input) {\r\n      $inputWithSameName.checked = false;\r\n      this.syncConditionalRevealWithInputState($inputWithSameName);\r\n    }\r\n  }.bind(this));\r\n};\r\n\r\n/**\r\n * Uncheck exclusive inputs\r\n *\r\n * Find any checkbox inputs with the same name value and the 'exclusive' behaviour,\r\n * and uncheck them. This helps prevent someone checking both a regular checkbox and a\r\n * \"None of these\" checkbox in the same fieldset.\r\n */\r\nCheckboxes.prototype.unCheckExclusiveInputs = function ($input) {\r\n  var allInputsWithSameNameAndExclusiveBehaviour = document.querySelectorAll(\r\n    'input[data-behaviour=\"exclusive\"][type=\"checkbox\"][name=\"' + $input.name + '\"]'\r\n  );\r\n\r\n  nodeListForEach(allInputsWithSameNameAndExclusiveBehaviour, function ($exclusiveInput) {\r\n    var hasSameFormOwner = ($input.form === $exclusiveInput.form);\r\n    if (hasSameFormOwner) {\r\n      $exclusiveInput.checked = false;\r\n      this.syncConditionalRevealWithInputState($exclusiveInput);\r\n    }\r\n  }.bind(this));\r\n};\r\n\r\n/**\r\n * Click event handler\r\n *\r\n * Handle a click within the $module – if the click occurred on a checkbox, sync\r\n * the state of any associated conditional reveal with the checkbox state.\r\n *\r\n * @param {MouseEvent} event - Click event\r\n */\r\nCheckboxes.prototype.handleClick = function (event) {\r\n  var $target = event.target;\r\n\r\n  // Ignore clicks on things that aren't checkbox inputs\r\n  if ($target.type !== 'checkbox') {\r\n    return\r\n  }\r\n\r\n  // If the checkbox conditionally-reveals some content, sync the state\r\n  var hasAriaControls = $target.getAttribute('aria-controls');\r\n  if (hasAriaControls) {\r\n    this.syncConditionalRevealWithInputState($target);\r\n  }\r\n\r\n  // No further behaviour needed for unchecking\r\n  if (!$target.checked) {\r\n    return\r\n  }\r\n\r\n  // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\r\n  var hasBehaviourExclusive = ($target.getAttribute('data-behaviour') === 'exclusive');\r\n  if (hasBehaviourExclusive) {\r\n    this.unCheckAllInputsExcept($target);\r\n  } else {\r\n    this.unCheckExclusiveInputs($target);\r\n  }\r\n};\r\n\r\n/**\r\n * JavaScript enhancements for the ErrorSummary\r\n *\r\n * Takes focus on initialisation for accessible announcement, unless disabled in configuration.\r\n *\r\n * @class\r\n * @param {HTMLElement} $module - The element this component controls\r\n * @param {ErrorSummaryConfig} config - Error summary config\r\n */\r\nfunction ErrorSummary ($module, config) {\r\n  // Some consuming code may not be passing a module,\r\n  // for example if they initialise the component\r\n  // on their own by directly passing the result\r\n  // of `document.querySelector`.\r\n  // To avoid breaking further JavaScript initialisation\r\n  // we need to safeguard against this so things keep\r\n  // working the same now we read the elements data attributes\r\n  if (!$module) {\r\n    // Little safety in case code gets ported as-is\r\n    // into and ES6 class constructor, where the return value matters\r\n    return this\r\n  }\r\n\r\n  this.$module = $module;\r\n\r\n  var defaultConfig = {\r\n    disableAutoFocus: false\r\n  };\r\n  this.config = mergeConfigs(\r\n    defaultConfig,\r\n    config || {},\r\n    normaliseDataset($module.dataset)\r\n  );\r\n}\r\n\r\nErrorSummary.prototype.init = function () {\r\n  var $module = this.$module;\r\n  if (!$module) {\r\n    return\r\n  }\r\n\r\n  this.setFocus();\r\n  $module.addEventListener('click', this.handleClick.bind(this));\r\n};\r\n\r\n/**\r\n * Focus the error summary\r\n */\r\nErrorSummary.prototype.setFocus = function () {\r\n  var $module = this.$module;\r\n\r\n  if (this.config.disableAutoFocus) {\r\n    return\r\n  }\r\n\r\n  // Set tabindex to -1 to make the element programmatically focusable, but\r\n  // remove it on blur as the error summary doesn't need to be focused again.\r\n  $module.setAttribute('tabindex', '-1');\r\n\r\n  $module.addEventListener('blur', function () {\r\n    $module.removeAttribute('tabindex');\r\n  });\r\n\r\n  $module.focus();\r\n};\r\n\r\n/**\r\n * Click event handler\r\n *\r\n * @param {MouseEvent} event - Click event\r\n */\r\nErrorSummary.prototype.handleClick = function (event) {\r\n  var target = event.target;\r\n  if (this.focusTarget(target)) {\r\n    event.preventDefault();\r\n  }\r\n};\r\n\r\n/**\r\n * Focus the target element\r\n *\r\n * By default, the browser will scroll the target into view. Because our labels\r\n * or legends appear above the input, this means the user will be presented with\r\n * an input without any context, as the label or legend will be off the top of\r\n * the screen.\r\n *\r\n * Manually handling the click event, scrolling the question into view and then\r\n * focussing the element solves this.\r\n *\r\n * This also results in the label and/or legend being announced correctly in\r\n * NVDA (as tested in 2018.3.2) - without this only the field type is announced\r\n * (e.g. \"Edit, has autocomplete\").\r\n *\r\n * @param {HTMLElement} $target - Event target\r\n * @returns {boolean} True if the target was able to be focussed\r\n */\r\nErrorSummary.prototype.focusTarget = function ($target) {\r\n  // If the element that was clicked was not a link, return early\r\n  if ($target.tagName !== 'A' || $target.href === false) {\r\n    return false\r\n  }\r\n\r\n  var inputId = this.getFragmentFromUrl($target.href);\r\n  var $input = document.getElementById(inputId);\r\n  if (!$input) {\r\n    return false\r\n  }\r\n\r\n  var $legendOrLabel = this.getAssociatedLegendOrLabel($input);\r\n  if (!$legendOrLabel) {\r\n    return false\r\n  }\r\n\r\n  // Scroll the legend or label into view *before* calling focus on the input to\r\n  // avoid extra scrolling in browsers that don't support `preventScroll` (which\r\n  // at time of writing is most of them...)\r\n  $legendOrLabel.scrollIntoView();\r\n  $input.focus({ preventScroll: true });\r\n\r\n  return true\r\n};\r\n\r\n/**\r\n * Get fragment from URL\r\n *\r\n * Extract the fragment (everything after the hash) from a URL, but not including\r\n * the hash.\r\n *\r\n * @param {string} url - URL\r\n * @returns {string} Fragment from URL, without the hash\r\n */\r\nErrorSummary.prototype.getFragmentFromUrl = function (url) {\r\n  if (url.indexOf('#') === -1) {\r\n    return false\r\n  }\r\n\r\n  return url.split('#').pop()\r\n};\r\n\r\n/**\r\n * Get associated legend or label\r\n *\r\n * Returns the first element that exists from this list:\r\n *\r\n * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\r\n *   as the top of it is no more than half a viewport height away from the\r\n *   bottom of the input\r\n * - The first `<label>` that is associated with the input using for=\"inputId\"\r\n * - The closest parent `<label>`\r\n *\r\n * @param {HTMLElement} $input - The input\r\n * @returns {HTMLElement} Associated legend or label, or null if no associated\r\n *                        legend or label can be found\r\n */\r\nErrorSummary.prototype.getAssociatedLegendOrLabel = function ($input) {\r\n  var $fieldset = $input.closest('fieldset');\r\n\r\n  if ($fieldset) {\r\n    var legends = $fieldset.getElementsByTagName('legend');\r\n\r\n    if (legends.length) {\r\n      var $candidateLegend = legends[0];\r\n\r\n      // If the input type is radio or checkbox, always use the legend if there\r\n      // is one.\r\n      if ($input.type === 'checkbox' || $input.type === 'radio') {\r\n        return $candidateLegend\r\n      }\r\n\r\n      // For other input types, only scroll to the fieldset’s legend (instead of\r\n      // the label associated with the input) if the input would end up in the\r\n      // top half of the screen.\r\n      //\r\n      // This should avoid situations where the input either ends up off the\r\n      // screen, or obscured by a software keyboard.\r\n      var legendTop = $candidateLegend.getBoundingClientRect().top;\r\n      var inputRect = $input.getBoundingClientRect();\r\n\r\n      // If the browser doesn't support Element.getBoundingClientRect().height\r\n      // or window.innerHeight (like IE8), bail and just link to the label.\r\n      if (inputRect.height && window.innerHeight) {\r\n        var inputBottom = inputRect.top + inputRect.height;\r\n\r\n        if (inputBottom - legendTop < window.innerHeight / 2) {\r\n          return $candidateLegend\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return document.querySelector(\"label[for='\" + $input.getAttribute('id') + \"']\") ||\r\n    $input.closest('label')\r\n};\r\n\r\n/**\r\n * Error summary config\r\n *\r\n * @typedef {object} ErrorSummaryConfig\r\n * @property {boolean} [disableAutoFocus = false] -\r\n *  If set to `true` the error summary will not be focussed when the page loads.\r\n */\r\n\r\n/**\r\n * Notification Banner component\r\n *\r\n * @class\r\n * @param {HTMLElement} $module - HTML element to use for notification banner\r\n * @param {NotificationBannerConfig} config - Notification banner config\r\n */\r\nfunction NotificationBanner ($module, config) {\r\n  this.$module = $module;\r\n\r\n  var defaultConfig = {\r\n    disableAutoFocus: false\r\n  };\r\n  this.config = mergeConfigs(\r\n    defaultConfig,\r\n    config || {},\r\n    normaliseDataset($module.dataset)\r\n  );\r\n}\r\n\r\n/**\r\n * Initialise the component\r\n */\r\nNotificationBanner.prototype.init = function () {\r\n  var $module = this.$module;\r\n  // Check for module\r\n  if (!$module) {\r\n    return\r\n  }\r\n\r\n  this.setFocus();\r\n};\r\n\r\n/**\r\n * Focus the element\r\n *\r\n * If `role=\"alert\"` is set, focus the element to help some assistive technologies\r\n * prioritise announcing it.\r\n *\r\n * You can turn off the auto-focus functionality by setting `data-disable-auto-focus=\"true\"` in the\r\n * component HTML. You might wish to do this based on user research findings, or to avoid a clash\r\n * with another element which should be focused when the page loads.\r\n */\r\nNotificationBanner.prototype.setFocus = function () {\r\n  var $module = this.$module;\r\n\r\n  if (this.config.disableAutoFocus) {\r\n    return\r\n  }\r\n\r\n  if ($module.getAttribute('role') !== 'alert') {\r\n    return\r\n  }\r\n\r\n  // Set tabindex to -1 to make the element focusable with JavaScript.\r\n  // Remove the tabindex on blur as the component doesn't need to be focusable after the page has\r\n  // loaded.\r\n  if (!$module.getAttribute('tabindex')) {\r\n    $module.setAttribute('tabindex', '-1');\r\n\r\n    $module.addEventListener('blur', function () {\r\n      $module.removeAttribute('tabindex');\r\n    });\r\n  }\r\n\r\n  $module.focus();\r\n};\r\n\r\n/**\r\n * Notification banner config\r\n *\r\n * @typedef {object} NotificationBannerConfig\r\n * @property {boolean} [disableAutoFocus = false] -\r\n *   If set to `true` the notification banner will not be focussed when the page\r\n *   loads. This only applies if the component has a `role` of `alert` – in\r\n *   other cases the component will not be focused on page load, regardless of\r\n *   this option.\r\n */\r\n\r\n/**\r\n * Header component\r\n *\r\n * @class\r\n * @param {HTMLElement} $module - HTML element to use for header\r\n */\r\nfunction Header ($module) {\r\n  this.$module = $module;\r\n  this.$menuButton = $module && $module.querySelector('.govuk-js-header-toggle');\r\n  this.$menu = this.$menuButton && $module.querySelector(\r\n    '#' + this.$menuButton.getAttribute('aria-controls')\r\n  );\r\n\r\n  // Save the opened/closed state for the nav in memory so that we can\r\n  // accurately maintain state when the screen is changed from small to\r\n  // big and back to small\r\n  this.menuIsOpen = false;\r\n\r\n  // A global const for storing a matchMedia instance which we'll use to\r\n  // detect when a screen size change happens. We set this later during the\r\n  // init function and rely on it being null if the feature isn't available\r\n  // to initially apply hidden attributes\r\n  this.mql = null;\r\n}\r\n\r\n/**\r\n * Initialise header\r\n *\r\n * Check for the presence of the header, menu and menu button – if any are\r\n * missing then there's nothing to do so return early.\r\n * Feature sniff for and apply a matchMedia for desktop which will\r\n * trigger a state sync if the browser viewport moves between states. If\r\n * matchMedia isn't available, hide the menu button and present the \"no js\"\r\n * version of the menu to the user.\r\n */\r\nHeader.prototype.init = function () {\r\n  if (!this.$module || !this.$menuButton || !this.$menu) {\r\n    return\r\n  }\r\n\r\n  if ('matchMedia' in window) {\r\n    // Set the matchMedia to the govuk-frontend desktop breakpoint\r\n    this.mql = window.matchMedia('(min-width: 48.0625em)');\r\n\r\n    if ('addEventListener' in this.mql) {\r\n      this.mql.addEventListener('change', this.syncState.bind(this));\r\n    } else {\r\n      // addListener is a deprecated function, however addEventListener\r\n      // isn't supported by IE or Safari. We therefore add this in as\r\n      // a fallback for those browsers\r\n      this.mql.addListener(this.syncState.bind(this));\r\n    }\r\n\r\n    this.syncState();\r\n    this.$menuButton.addEventListener('click', this.handleMenuButtonClick.bind(this));\r\n  } else {\r\n    this.$menuButton.setAttribute('hidden', '');\r\n  }\r\n};\r\n\r\n/**\r\n * Sync menu state\r\n *\r\n * Uses the global variable menuIsOpen to correctly set the accessible and\r\n * visual states of the menu and the menu button.\r\n * Additionally will force the menu to be visible and the menu button to be\r\n * hidden if the matchMedia is triggered to desktop.\r\n */\r\nHeader.prototype.syncState = function () {\r\n  if (this.mql.matches) {\r\n    this.$menu.removeAttribute('hidden');\r\n    this.$menuButton.setAttribute('hidden', '');\r\n  } else {\r\n    this.$menuButton.removeAttribute('hidden');\r\n    this.$menuButton.setAttribute('aria-expanded', this.menuIsOpen);\r\n\r\n    if (this.menuIsOpen) {\r\n      this.$menu.removeAttribute('hidden');\r\n    } else {\r\n      this.$menu.setAttribute('hidden', '');\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Handle menu button click\r\n *\r\n * When the menu button is clicked, change the visibility of the menu and then\r\n * sync the accessibility state and menu button state\r\n */\r\nHeader.prototype.handleMenuButtonClick = function () {\r\n  this.menuIsOpen = !this.menuIsOpen;\r\n  this.syncState();\r\n};\r\n\r\n/**\r\n * Radios component\r\n *\r\n * @class\r\n * @param {HTMLElement} $module - HTML element to use for radios\r\n */\r\nfunction Radios ($module) {\r\n  this.$module = $module;\r\n  this.$inputs = $module.querySelectorAll('input[type=\"radio\"]');\r\n}\r\n\r\n/**\r\n * Initialise Radios\r\n *\r\n * Radios can be associated with a 'conditionally revealed' content block – for\r\n * example, a radio for 'Phone' could reveal an additional form field for the\r\n * user to enter their phone number.\r\n *\r\n * These associations are made using a `data-aria-controls` attribute, which is\r\n * promoted to an aria-controls attribute during initialisation.\r\n *\r\n * We also need to restore the state of any conditional reveals on the page (for\r\n * example if the user has navigated back), and set up event handlers to keep\r\n * the reveal in sync with the radio state.\r\n */\r\nRadios.prototype.init = function () {\r\n  var $module = this.$module;\r\n  var $inputs = this.$inputs;\r\n\r\n  nodeListForEach($inputs, function ($input) {\r\n    var target = $input.getAttribute('data-aria-controls');\r\n\r\n    // Skip radios without data-aria-controls attributes, or where the\r\n    // target element does not exist.\r\n    if (!target || !document.getElementById(target)) {\r\n      return\r\n    }\r\n\r\n    // Promote the data-aria-controls attribute to a aria-controls attribute\r\n    // so that the relationship is exposed in the AOM\r\n    $input.setAttribute('aria-controls', target);\r\n    $input.removeAttribute('data-aria-controls');\r\n  });\r\n\r\n  // When the page is restored after navigating 'back' in some browsers the\r\n  // state of form controls is not restored until *after* the DOMContentLoaded\r\n  // event is fired, so we need to sync after the pageshow event in browsers\r\n  // that support it.\r\n  if ('onpageshow' in window) {\r\n    window.addEventListener('pageshow', this.syncAllConditionalReveals.bind(this));\r\n  } else {\r\n    window.addEventListener('DOMContentLoaded', this.syncAllConditionalReveals.bind(this));\r\n  }\r\n\r\n  // Although we've set up handlers to sync state on the pageshow or\r\n  // DOMContentLoaded event, init could be called after those events have fired,\r\n  // for example if they are added to the page dynamically, so sync now too.\r\n  this.syncAllConditionalReveals();\r\n\r\n  // Handle events\r\n  $module.addEventListener('click', this.handleClick.bind(this));\r\n};\r\n\r\n/**\r\n * Sync the conditional reveal states for all inputs in this $module.\r\n */\r\nRadios.prototype.syncAllConditionalReveals = function () {\r\n  nodeListForEach(this.$inputs, this.syncConditionalRevealWithInputState.bind(this));\r\n};\r\n\r\n/**\r\n * Sync conditional reveal with the input state\r\n *\r\n * Synchronise the visibility of the conditional reveal, and its accessible\r\n * state, with the input's checked state.\r\n *\r\n * @param {HTMLInputElement} $input - Radio input\r\n */\r\nRadios.prototype.syncConditionalRevealWithInputState = function ($input) {\r\n  var $target = document.getElementById($input.getAttribute('aria-controls'));\r\n\r\n  if ($target && $target.classList.contains('govuk-radios__conditional')) {\r\n    var inputIsChecked = $input.checked;\r\n\r\n    $input.setAttribute('aria-expanded', inputIsChecked);\r\n    $target.classList.toggle('govuk-radios__conditional--hidden', !inputIsChecked);\r\n  }\r\n};\r\n\r\n/**\r\n * Click event handler\r\n *\r\n * Handle a click within the $module – if the click occurred on a radio, sync\r\n * the state of the conditional reveal for all radio buttons in the same form\r\n * with the same name (because checking one radio could have un-checked a radio\r\n * in another $module)\r\n *\r\n * @param {MouseEvent} event - Click event\r\n */\r\nRadios.prototype.handleClick = function (event) {\r\n  var $clickedInput = event.target;\r\n\r\n  // Ignore clicks on things that aren't radio buttons\r\n  if ($clickedInput.type !== 'radio') {\r\n    return\r\n  }\r\n\r\n  // We only need to consider radios with conditional reveals, which will have\r\n  // aria-controls attributes.\r\n  var $allInputs = document.querySelectorAll('input[type=\"radio\"][aria-controls]');\r\n\r\n  nodeListForEach($allInputs, function ($input) {\r\n    var hasSameFormOwner = ($input.form === $clickedInput.form);\r\n    var hasSameName = ($input.name === $clickedInput.name);\r\n\r\n    if (hasSameName && hasSameFormOwner) {\r\n      this.syncConditionalRevealWithInputState($input);\r\n    }\r\n  }.bind(this));\r\n};\r\n\r\n/**\r\n * Skip link component\r\n *\r\n * @class\r\n * @param {HTMLElement} $module - HTML element to use for skip link\r\n */\r\nfunction SkipLink ($module) {\r\n  this.$module = $module;\r\n  this.$linkedElement = null;\r\n  this.linkedElementListener = false;\r\n}\r\n\r\n/**\r\n * Initialise the component\r\n */\r\nSkipLink.prototype.init = function () {\r\n  // Check for module\r\n  if (!this.$module) {\r\n    return\r\n  }\r\n\r\n  // Check for linked element\r\n  this.$linkedElement = this.getLinkedElement();\r\n  if (!this.$linkedElement) {\r\n    return\r\n  }\r\n\r\n  this.$module.addEventListener('click', this.focusLinkedElement.bind(this));\r\n};\r\n\r\n/**\r\n * Get linked element\r\n *\r\n * @returns {HTMLElement} $linkedElement - DOM element linked to from the skip link\r\n */\r\nSkipLink.prototype.getLinkedElement = function () {\r\n  var linkedElementId = this.getFragmentFromUrl();\r\n\r\n  if (!linkedElementId) {\r\n    return false\r\n  }\r\n\r\n  return document.getElementById(linkedElementId)\r\n};\r\n\r\n/**\r\n * Focus the linked element\r\n *\r\n * Set tabindex and helper CSS class. Set listener to remove them on blur.\r\n */\r\nSkipLink.prototype.focusLinkedElement = function () {\r\n  var $linkedElement = this.$linkedElement;\r\n\r\n  if (!$linkedElement.getAttribute('tabindex')) {\r\n    // Set the element tabindex to -1 so it can be focused with JavaScript.\r\n    $linkedElement.setAttribute('tabindex', '-1');\r\n    $linkedElement.classList.add('govuk-skip-link-focused-element');\r\n\r\n    // Add listener for blur on the focused element (unless the listener has previously been added)\r\n    if (!this.linkedElementListener) {\r\n      this.$linkedElement.addEventListener('blur', this.removeFocusProperties.bind(this));\r\n      this.linkedElementListener = true;\r\n    }\r\n  }\r\n  $linkedElement.focus();\r\n};\r\n\r\n/**\r\n * Remove the tabindex that makes the linked element focusable because the element only needs to be\r\n * focusable until it has received programmatic focus and a screen reader has announced it.\r\n *\r\n * Remove the CSS class that removes the native focus styles.\r\n */\r\nSkipLink.prototype.removeFocusProperties = function () {\r\n  this.$linkedElement.removeAttribute('tabindex');\r\n  this.$linkedElement.classList.remove('govuk-skip-link-focused-element');\r\n};\r\n\r\n/**\r\n * Get fragment from URL\r\n *\r\n * Extract the fragment (everything after the hash symbol) from a URL, but not including\r\n * the symbol.\r\n *\r\n * @returns {string} Fragment from URL, without the hash symbol\r\n */\r\nSkipLink.prototype.getFragmentFromUrl = function () {\r\n  // Bail if the anchor link doesn't have a hash\r\n  if (!this.$module.hash) {\r\n    return false\r\n  }\r\n\r\n  return this.$module.hash.split('#').pop()\r\n};\r\n\r\n(function(undefined) {\r\n\r\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-library/master/polyfills/Element/prototype/nextElementSibling/detect.js\r\n    var detect = (\r\n      'document' in this && \"nextElementSibling\" in document.documentElement\r\n    );\r\n\r\n    if (detect) return\r\n\r\n    // Polyfill from https://raw.githubusercontent.com/Financial-Times/polyfill-library/master/polyfills/Element/prototype/nextElementSibling/polyfill.js\r\n    Object.defineProperty(Element.prototype, \"nextElementSibling\", {\r\n      get: function(){\r\n        var el = this.nextSibling;\r\n        while (el && el.nodeType !== 1) { el = el.nextSibling; }\r\n        return el;\r\n      }\r\n    });\r\n\r\n}).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n(function(undefined) {\r\n\r\n    // Detection from https://raw.githubusercontent.com/Financial-Times/polyfill-library/master/polyfills/Element/prototype/previousElementSibling/detect.js\r\n    var detect = (\r\n      'document' in this && \"previousElementSibling\" in document.documentElement\r\n    );\r\n\r\n    if (detect) return\r\n\r\n    // Polyfill from https://raw.githubusercontent.com/Financial-Times/polyfill-library/master/polyfills/Element/prototype/previousElementSibling/polyfill.js\r\n    Object.defineProperty(Element.prototype, 'previousElementSibling', {\r\n      get: function(){\r\n        var el = this.previousSibling;\r\n        while (el && el.nodeType !== 1) { el = el.previousSibling; }\r\n        return el;\r\n      }\r\n    });\r\n\r\n}).call('object' === typeof window && window || 'object' === typeof self && self || 'object' === typeof global && global || {});\r\n\r\n/**\r\n * Tabs component\r\n *\r\n * @class\r\n * @param {HTMLElement} $module - HTML element to use for tabs\r\n */\r\nfunction Tabs ($module) {\r\n  this.$module = $module;\r\n  this.$tabs = $module.querySelectorAll('.govuk-tabs__tab');\r\n\r\n  this.keys = { left: 37, right: 39, up: 38, down: 40 };\r\n  this.jsHiddenClass = 'govuk-tabs__panel--hidden';\r\n}\r\n\r\nTabs.prototype.init = function () {\r\n  if (typeof window.matchMedia === 'function') {\r\n    this.setupResponsiveChecks();\r\n  } else {\r\n    this.setup();\r\n  }\r\n};\r\n\r\nTabs.prototype.setupResponsiveChecks = function () {\r\n  this.mql = window.matchMedia('(min-width: 40.0625em)');\r\n  this.mql.addListener(this.checkMode.bind(this));\r\n  this.checkMode();\r\n};\r\n\r\nTabs.prototype.checkMode = function () {\r\n  if (this.mql.matches) {\r\n    this.setup();\r\n  } else {\r\n    this.teardown();\r\n  }\r\n};\r\n\r\nTabs.prototype.setup = function () {\r\n  var $module = this.$module;\r\n  var $tabs = this.$tabs;\r\n  var $tabList = $module.querySelector('.govuk-tabs__list');\r\n  var $tabListItems = $module.querySelectorAll('.govuk-tabs__list-item');\r\n\r\n  if (!$tabs || !$tabList || !$tabListItems) {\r\n    return\r\n  }\r\n\r\n  $tabList.setAttribute('role', 'tablist');\r\n\r\n  nodeListForEach($tabListItems, function ($item) {\r\n    $item.setAttribute('role', 'presentation');\r\n  });\r\n\r\n  nodeListForEach($tabs, function ($tab) {\r\n    // Set HTML attributes\r\n    this.setAttributes($tab);\r\n\r\n    // Save bounded functions to use when removing event listeners during teardown\r\n    $tab.boundTabClick = this.onTabClick.bind(this);\r\n    $tab.boundTabKeydown = this.onTabKeydown.bind(this);\r\n\r\n    // Handle events\r\n    $tab.addEventListener('click', $tab.boundTabClick, true);\r\n    $tab.addEventListener('keydown', $tab.boundTabKeydown, true);\r\n\r\n    // Remove old active panels\r\n    this.hideTab($tab);\r\n  }.bind(this));\r\n\r\n  // Show either the active tab according to the URL's hash or the first tab\r\n  var $activeTab = this.getTab(window.location.hash) || this.$tabs[0];\r\n  this.showTab($activeTab);\r\n\r\n  // Handle hashchange events\r\n  $module.boundOnHashChange = this.onHashChange.bind(this);\r\n  window.addEventListener('hashchange', $module.boundOnHashChange, true);\r\n};\r\n\r\nTabs.prototype.teardown = function () {\r\n  var $module = this.$module;\r\n  var $tabs = this.$tabs;\r\n  var $tabList = $module.querySelector('.govuk-tabs__list');\r\n  var $tabListItems = $module.querySelectorAll('.govuk-tabs__list-item');\r\n\r\n  if (!$tabs || !$tabList || !$tabListItems) {\r\n    return\r\n  }\r\n\r\n  $tabList.removeAttribute('role');\r\n\r\n  nodeListForEach($tabListItems, function ($item) {\r\n    $item.removeAttribute('role', 'presentation');\r\n  });\r\n\r\n  nodeListForEach($tabs, function ($tab) {\r\n    // Remove events\r\n    $tab.removeEventListener('click', $tab.boundTabClick, true);\r\n    $tab.removeEventListener('keydown', $tab.boundTabKeydown, true);\r\n\r\n    // Unset HTML attributes\r\n    this.unsetAttributes($tab);\r\n  }.bind(this));\r\n\r\n  // Remove hashchange event handler\r\n  window.removeEventListener('hashchange', $module.boundOnHashChange, true);\r\n};\r\n\r\nTabs.prototype.onHashChange = function (e) {\r\n  var hash = window.location.hash;\r\n  var $tabWithHash = this.getTab(hash);\r\n  if (!$tabWithHash) {\r\n    return\r\n  }\r\n\r\n  // Prevent changing the hash\r\n  if (this.changingHash) {\r\n    this.changingHash = false;\r\n    return\r\n  }\r\n\r\n  // Show either the active tab according to the URL's hash or the first tab\r\n  var $previousTab = this.getCurrentTab();\r\n\r\n  this.hideTab($previousTab);\r\n  this.showTab($tabWithHash);\r\n  $tabWithHash.focus();\r\n};\r\n\r\nTabs.prototype.hideTab = function ($tab) {\r\n  this.unhighlightTab($tab);\r\n  this.hidePanel($tab);\r\n};\r\n\r\nTabs.prototype.showTab = function ($tab) {\r\n  this.highlightTab($tab);\r\n  this.showPanel($tab);\r\n};\r\n\r\nTabs.prototype.getTab = function (hash) {\r\n  return this.$module.querySelector('.govuk-tabs__tab[href=\"' + hash + '\"]')\r\n};\r\n\r\nTabs.prototype.setAttributes = function ($tab) {\r\n  // set tab attributes\r\n  var panelId = this.getHref($tab).slice(1);\r\n  $tab.setAttribute('id', 'tab_' + panelId);\r\n  $tab.setAttribute('role', 'tab');\r\n  $tab.setAttribute('aria-controls', panelId);\r\n  $tab.setAttribute('aria-selected', 'false');\r\n  $tab.setAttribute('tabindex', '-1');\r\n\r\n  // set panel attributes\r\n  var $panel = this.getPanel($tab);\r\n  $panel.setAttribute('role', 'tabpanel');\r\n  $panel.setAttribute('aria-labelledby', $tab.id);\r\n  $panel.classList.add(this.jsHiddenClass);\r\n};\r\n\r\nTabs.prototype.unsetAttributes = function ($tab) {\r\n  // unset tab attributes\r\n  $tab.removeAttribute('id');\r\n  $tab.removeAttribute('role');\r\n  $tab.removeAttribute('aria-controls');\r\n  $tab.removeAttribute('aria-selected');\r\n  $tab.removeAttribute('tabindex');\r\n\r\n  // unset panel attributes\r\n  var $panel = this.getPanel($tab);\r\n  $panel.removeAttribute('role');\r\n  $panel.removeAttribute('aria-labelledby');\r\n  $panel.classList.remove(this.jsHiddenClass);\r\n};\r\n\r\nTabs.prototype.onTabClick = function (e) {\r\n  if (!e.target.classList.contains('govuk-tabs__tab')) {\r\n  // Allow events on child DOM elements to bubble up to tab parent\r\n    return false\r\n  }\r\n  e.preventDefault();\r\n  var $newTab = e.target;\r\n  var $currentTab = this.getCurrentTab();\r\n  this.hideTab($currentTab);\r\n  this.showTab($newTab);\r\n  this.createHistoryEntry($newTab);\r\n};\r\n\r\nTabs.prototype.createHistoryEntry = function ($tab) {\r\n  var $panel = this.getPanel($tab);\r\n\r\n  // Save and restore the id\r\n  // so the page doesn't jump when a user clicks a tab (which changes the hash)\r\n  var id = $panel.id;\r\n  $panel.id = '';\r\n  this.changingHash = true;\r\n  window.location.hash = this.getHref($tab).slice(1);\r\n  $panel.id = id;\r\n};\r\n\r\nTabs.prototype.onTabKeydown = function (e) {\r\n  switch (e.keyCode) {\r\n    case this.keys.left:\r\n    case this.keys.up:\r\n      this.activatePreviousTab();\r\n      e.preventDefault();\r\n      break\r\n    case this.keys.right:\r\n    case this.keys.down:\r\n      this.activateNextTab();\r\n      e.preventDefault();\r\n      break\r\n  }\r\n};\r\n\r\nTabs.prototype.activateNextTab = function () {\r\n  var currentTab = this.getCurrentTab();\r\n  var nextTabListItem = currentTab.parentNode.nextElementSibling;\r\n  if (nextTabListItem) {\r\n    var nextTab = nextTabListItem.querySelector('.govuk-tabs__tab');\r\n  }\r\n  if (nextTab) {\r\n    this.hideTab(currentTab);\r\n    this.showTab(nextTab);\r\n    nextTab.focus();\r\n    this.createHistoryEntry(nextTab);\r\n  }\r\n};\r\n\r\nTabs.prototype.activatePreviousTab = function () {\r\n  var currentTab = this.getCurrentTab();\r\n  var previousTabListItem = currentTab.parentNode.previousElementSibling;\r\n  if (previousTabListItem) {\r\n    var previousTab = previousTabListItem.querySelector('.govuk-tabs__tab');\r\n  }\r\n  if (previousTab) {\r\n    this.hideTab(currentTab);\r\n    this.showTab(previousTab);\r\n    previousTab.focus();\r\n    this.createHistoryEntry(previousTab);\r\n  }\r\n};\r\n\r\nTabs.prototype.getPanel = function ($tab) {\r\n  var $panel = this.$module.querySelector(this.getHref($tab));\r\n  return $panel\r\n};\r\n\r\nTabs.prototype.showPanel = function ($tab) {\r\n  var $panel = this.getPanel($tab);\r\n  $panel.classList.remove(this.jsHiddenClass);\r\n};\r\n\r\nTabs.prototype.hidePanel = function (tab) {\r\n  var $panel = this.getPanel(tab);\r\n  $panel.classList.add(this.jsHiddenClass);\r\n};\r\n\r\nTabs.prototype.unhighlightTab = function ($tab) {\r\n  $tab.setAttribute('aria-selected', 'false');\r\n  $tab.parentNode.classList.remove('govuk-tabs__list-item--selected');\r\n  $tab.setAttribute('tabindex', '-1');\r\n};\r\n\r\nTabs.prototype.highlightTab = function ($tab) {\r\n  $tab.setAttribute('aria-selected', 'true');\r\n  $tab.parentNode.classList.add('govuk-tabs__list-item--selected');\r\n  $tab.setAttribute('tabindex', '0');\r\n};\r\n\r\nTabs.prototype.getCurrentTab = function () {\r\n  return this.$module.querySelector('.govuk-tabs__list-item--selected .govuk-tabs__tab')\r\n};\r\n\r\n// this is because IE doesn't always return the actual value but a relative full path\r\n// should be a utility function most prob\r\n// http://labs.thesedays.com/blog/2010/01/08/getting-the-href-value-with-jquery-in-ie/\r\nTabs.prototype.getHref = function ($tab) {\r\n  var href = $tab.getAttribute('href');\r\n  var hash = href.slice(href.indexOf('#'), href.length);\r\n  return hash\r\n};\r\n\r\n/**\r\n * Initialise all components\r\n *\r\n * Use the `data-module` attributes to find, instantiate and init all of the\r\n * components provided as part of GOV.UK Frontend.\r\n *\r\n * @param {Config} [config] - Config for all components\r\n */\r\nfunction initAll (config) {\r\n  config = typeof config !== 'undefined' ? config : {};\r\n\r\n  // Allow the user to initialise GOV.UK Frontend in only certain sections of the page\r\n  // Defaults to the entire document if nothing is set.\r\n  var $scope = typeof config.scope !== 'undefined' ? config.scope : document;\r\n\r\n  var $accordions = $scope.querySelectorAll('[data-module=\"govuk-accordion\"]');\r\n  nodeListForEach($accordions, function ($accordion) {\r\n    new Accordion($accordion, config.accordion).init();\r\n  });\r\n\r\n  var $buttons = $scope.querySelectorAll('[data-module=\"govuk-button\"]');\r\n  nodeListForEach($buttons, function ($button) {\r\n    new Button($button, config.button).init();\r\n  });\r\n\r\n  var $characterCounts = $scope.querySelectorAll('[data-module=\"govuk-character-count\"]');\r\n  nodeListForEach($characterCounts, function ($characterCount) {\r\n    new CharacterCount($characterCount, config.characterCount).init();\r\n  });\r\n\r\n  var $checkboxes = $scope.querySelectorAll('[data-module=\"govuk-checkboxes\"]');\r\n  nodeListForEach($checkboxes, function ($checkbox) {\r\n    new Checkboxes($checkbox).init();\r\n  });\r\n\r\n  var $details = $scope.querySelectorAll('[data-module=\"govuk-details\"]');\r\n  nodeListForEach($details, function ($detail) {\r\n    new Details($detail).init();\r\n  });\r\n\r\n  // Find first error summary module to enhance.\r\n  var $errorSummary = $scope.querySelector('[data-module=\"govuk-error-summary\"]');\r\n  if ($errorSummary) {\r\n    new ErrorSummary($errorSummary, config.errorSummary).init();\r\n  }\r\n\r\n  // Find first header module to enhance.\r\n  var $header = $scope.querySelector('[data-module=\"govuk-header\"]');\r\n  if ($header) {\r\n    new Header($header).init();\r\n  }\r\n\r\n  var $notificationBanners = $scope.querySelectorAll('[data-module=\"govuk-notification-banner\"]');\r\n  nodeListForEach($notificationBanners, function ($notificationBanner) {\r\n    new NotificationBanner($notificationBanner, config.notificationBanner).init();\r\n  });\r\n\r\n  var $radios = $scope.querySelectorAll('[data-module=\"govuk-radios\"]');\r\n  nodeListForEach($radios, function ($radio) {\r\n    new Radios($radio).init();\r\n  });\r\n\r\n  // Find first skip link module to enhance.\r\n  var $skipLink = $scope.querySelector('[data-module=\"govuk-skip-link\"]');\r\n  new SkipLink($skipLink).init();\r\n\r\n  var $tabs = $scope.querySelectorAll('[data-module=\"govuk-tabs\"]');\r\n  nodeListForEach($tabs, function ($tabs) {\r\n    new Tabs($tabs).init();\r\n  });\r\n}\r\n\r\n/**\r\n * Config for all components\r\n *\r\n * @typedef {object} Config\r\n * @property {HTMLElement} [scope=document] - Scope to query for components\r\n * @property {import('./components/accordion/accordion.mjs').AccordionConfig} [accordion] - Accordion config\r\n * @property {import('./components/button/button.mjs').ButtonConfig} [button] - Button config\r\n * @property {import('./components/character-count/character-count.mjs').CharacterCountConfig} [characterCount] - Character Count config\r\n * @property {import('./components/error-summary/error-summary.mjs').ErrorSummaryConfig} [errorSummary] - Error Summary config\r\n * @property {import('./components/notification-banner/notification-banner.mjs').NotificationBannerConfig} [notificationBanner] - Notification Banner config\r\n */\r\n\r\nexports.initAll = initAll;\r\nexports.Accordion = Accordion;\r\nexports.Button = Button;\r\nexports.Details = Details;\r\nexports.CharacterCount = CharacterCount;\r\nexports.Checkboxes = Checkboxes;\r\nexports.ErrorSummary = ErrorSummary;\r\nexports.Header = Header;\r\nexports.NotificationBanner = NotificationBanner;\r\nexports.Radios = Radios;\r\nexports.SkipLink = SkipLink;\r\nexports.Tabs = Tabs;\r\n\r\n})));\r\n\r\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\r\n"]}