using FamilyHubs.ServiceDirectory.Web.Filtering;
using FamilyHubs.ServiceDirectory.Web.Filtering.Interfaces;
using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Primitives;

namespace FamilyHubs.ServiceDirectory.UnitTests.Web.Filtering;

//todo: these tests generated by chatgpt. can be improved, but a good starting point!
public class FilterTests
{
    [Fact]
    public void TestFilterConstruction()
    {
        // Arrange
        var name = "TestFilter";
        var description = "This is a test filter.";
        var filterType = FilterType.Checkboxes;
        var aspects = new List<IFilterAspect>
        {
            new FilterAspect("TestFilter--1", "Test Aspect 1", true),
            new FilterAspect("TestFilter--2", "Test Aspect 2", false),
            new FilterAspect("TestFilter--3", "Test Aspect 3", true)
        };

        // Act
        var filter = new Filter(name, description, filterType, aspects);

        // Assert
        Assert.Equal(name, filter.Name);
        Assert.Equal(description, filter.Description);
        Assert.Equal(filterType, filter.FilterType);
        Assert.Equal(aspects, filter.Aspects);
        Assert.Equal(new[] { "1", "3" }, filter.Values.ToArray());
        Assert.Equal(aspects.Where(a => a.SelectedByDefault), filter.SelectedAspects);
    }

    [Fact]
    public void TestToPostFilter()
    {
        // Arrange
        var name = "TestFilter";
        var description = "This is a test filter.";
        var filterType = FilterType.Checkboxes;
        var aspects = new List<IFilterAspect>
        {
            new FilterAspect("TestFilter--1", "Test Aspect 1", true),
            new FilterAspect("TestFilter--2", "Test Aspect 2", false),
            new FilterAspect("TestFilter--3", "Test Aspect 3", true)
        };
        var filter = new Filter(name, description, filterType, aspects);
        var form = new FormCollection(new Dictionary<string, StringValues>
        {
            {"TestFilter1", "on"},
            {"TestFilter2", "on"}
        });
        var remove = "TestFilter1";

        // Act
        var postFilter = filter.ToPostFilter(form, remove);

        // Assert
        Assert.IsType<PostFilter>(postFilter);
        //Assert.Equal(filter, ((PostFilter)postFilter).BaseFilter);
        //Assert.Equal(form, ((PostFilter)postFilter).Form);
        //Assert.Equal(remove, ((PostFilter)postFilter).Remove);
    }

    [Fact]
    public void TestIsSelected()
    {
        // Arrange
        var name = "TestFilter";
        var description = "This is a test filter.";
        var filterType = FilterType.Checkboxes;
        var aspects = new List<IFilterAspect>
        {
            new FilterAspect("TestFilter--1", "Test Aspect 1", true),
            new FilterAspect("TestFilter--2", "Test Aspect 2", false),
            new FilterAspect("TestFilter--3", "Test Aspect 3", true)
        };
        var filter = new Filter(name, description, filterType, aspects);

        // Act and Assert
        Assert.True(filter.IsSelected(aspects[0]));
        Assert.False(filter.IsSelected(aspects[1]));
        Assert.True(filter.IsSelected(aspects[2]));
    }
}